[{"path":"https://furlan-lab.github.io/viewmastR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Scott N Furlan Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/articles/Augment.html","id":"installing-rust","dir":"Articles","previous_headings":"","what":"Installing Rust","title":"How to augment data using viewmastR","text":"First need updated Rust installation. Go site learn install Rust.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/articles/Augment.html","id":"installing-viewmastr","dir":"Articles","previous_headings":"","what":"Installing viewmastR","title":"How to augment data using viewmastR","text":"need devtools package installed…","code":"devtools::install_github(\"furlan-lab/viewmastR\")"},{"path":"https://furlan-lab.github.io/viewmastR/articles/Augment.html","id":"load-a-dataset","dir":"Articles","previous_headings":"","what":"Load a dataset","title":"How to augment data using viewmastR","text":"","code":"suppressPackageStartupMessages({ library(viewmastR) library(Seurat) library(ggplot2) library(scCustomize) library(magrittr) })   #query dataset seu<-readRDS(file.path(ROOT_DIR1, \"220302_final_object.RDS\"))"},{"path":"https://furlan-lab.github.io/viewmastR/articles/Augment.html","id":"lets-first-fix-this-dataset-and-label-with-tregs","dir":"Articles","previous_headings":"","what":"Let’s first fix this dataset and label with Tregs","title":"How to augment data using viewmastR","text":"Tregs located cluster 9 (evidenced FOXP3 expression), don’t correct label. Let’s fix .       Better…","code":"DimPlot_scCustom(seu, group.by = \"celltype\") Idents(seu)<-seu$celltype Cluster_Highlight_Plot(seu, cluster_name = \"Treg\") DimPlot_scCustom(seu, group.by = \"seurat_clusters\") FeaturePlot_scCustom(seu, features = \"FOXP3\") seu$celltype[seu$seurat_clusters %in% \"9\"]<-\"Treg\" DimPlot_scCustom(seu, group.by = \"celltype\") Idents(seu)<-seu$celltype Cluster_Highlight_Plot(seu, cluster_name = \"Treg\") table(seu$celltype) ##  ##    B Memory     B Naive   Basophils   CD14 Mono   CD16 Mono  CD4 Memory  ##         199         666           9        3626         722        2115  ##   CD4 Naive  CD8 Memory   CD8 Naive         cDC Neutrophils          NK  ##        1142        1209         388         127           9         843  ##         pDC        Treg  ##           3         250"},{"path":"https://furlan-lab.github.io/viewmastR/articles/Augment.html","id":"lets-augment-rare-celltypes-for-better-learning-but-bringing-any-celltype-to-a-minimum-of-1500-cells--use-the-prune-option-to-downsample-any-celltypes-present-above-the-norm_number-down-to-that-number-","dir":"Articles","previous_headings":"","what":"Let’s augment rare celltypes for better learning but bringing any celltype to a minimum of 1500 cells. use the prune option to downsample any celltypes present above the norm_number down to that number.","title":"How to augment data using viewmastR","text":"","code":"seuA<-augment_data(seu, \"celltype\", norm_number = 500, prune = T) seuA <- FindVariableFeatures(seuA, selection.method = \"vst\", nfeatures = 3000) %>% NormalizeData() %>% ScaleData() seuA <- RunPCA(seuA, features = VariableFeatures(object = seuA), npcs = 50) ElbowPlot(seuA, 50) seuA<- FindNeighbors(seuA, dims = 1:40) %>% FindClusters(resolution = 2) %>% RunUMAP(dims = 1:40, n.components = 2) ## Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck ##  ## Number of nodes: 7000 ## Number of edges: 358197 ##  ## Running Louvain algorithm... ## Maximum modularity in 10 random starts: 0.8512 ## Number of communities: 19 ## Elapsed time: 0 seconds DimPlot_scCustom(seuA, group.by = \"celltype\") FeaturePlot_scCustom(seuA, features = \"FOXP3\")"},{"path":"https://furlan-lab.github.io/viewmastR/articles/Augment.html","id":"now-we-train-another-pbmc-dataset-with-labels-for-tregs-that-are-questionable-and-see-if-we-can-find-them","dir":"Articles","previous_headings":"","what":"Now we train another PBMC dataset with labels for tregs that are questionable and see if we can find them","title":"How to augment data using viewmastR","text":"","code":"seu<-readRDS(file.path(ROOT_DIR3, \"240919_5p_seu.RDS\"))  seu<-calculate_gene_dispersion(seu) seu<-select_features(seu, top_n = 10000, logmean_ul = -1, logmean_ll = -8) vgq<-get_selected_features(seu)  seuA<-calculate_gene_dispersion(seuA) seuA<-select_features(seuA, top_n = 10000, logmean_ul = -1, logmean_ll = -8) vgr<-get_selected_features(seuA)  vg<-intersect(vgq, vgr)  seu<-viewmastR(seu, seuA, ref_celldata_col = \"celltype\", selected_features = vg)  DimPlot_scCustom(seu, group.by = \"mCelltype\") #need to fix spelling error #seu$mCelltype[seu$mCelltype==\"Jeutrophils\"]<-\"Neutrophils\" DimPlot_scCustom(seu, group.by = \"viewmastR_pred\")"},{"path":"https://furlan-lab.github.io/viewmastR/articles/Augment.html","id":"a-confusion-matrix-showing-prediction-vs-ground-truth","dir":"Articles","previous_headings":"","what":"A confusion matrix showing prediction vs ground truth","title":"How to augment data using viewmastR","text":"","code":"co<-as.character(pals::polychrome(length(levels(factor(c(seu$mCelltype, seu$viewmastR_pred)))))) names(co)<-levels(factor(c(seu$mCelltype, seu$viewmastR_pred))) confusion_matrix(pred = factor(seu$viewmastR_pred), gt = factor(seu$mCelltype), cols = co) Idents(seu)<-seu$viewmastR_pred VlnPlot_scCustom(seu, features = \"FOXP3\") Idents(seu)<-seu$mCelltype VlnPlot_scCustom(seu, features = \"FOXP3\")"},{"path":"https://furlan-lab.github.io/viewmastR/articles/Augment.html","id":"appendix","dir":"Articles","previous_headings":"","what":"Appendix","title":"How to augment data using viewmastR","text":"","code":"sessionInfo() ## R version 4.4.3 (2025-02-28) ## Platform: aarch64-apple-darwin20 ## Running under: macOS Sequoia 15.4.1 ##  ## Matrix products: default ## BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib  ## LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0 ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## time zone: America/Los_Angeles ## tzcode source: internal ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] future_1.40.0      magrittr_2.0.3     scCustomize_3.0.1  ggplot2_3.5.2      ## [5] Seurat_5.2.1       SeuratObject_5.0.2 sp_2.2-0           viewmastR_0.3.0    ##  ## loaded via a namespace (and not attached): ##   [1] fs_1.6.5                    matrixStats_1.5.0           ##   [3] spatstat.sparse_3.1-0       RcppMsgPack_0.2.4           ##   [5] lubridate_1.9.4             httr_1.4.7                  ##   [7] RColorBrewer_1.1-3          doParallel_1.0.17           ##   [9] tools_4.4.3                 sctransform_0.4.1           ##  [11] backports_1.5.0             R6_2.6.1                    ##  [13] lazyeval_0.2.2              uwot_0.2.3                  ##  [15] GetoptLong_1.0.5            withr_3.0.2                 ##  [17] gridExtra_2.3               progressr_0.15.1            ##  [19] cli_3.6.4                   Biobase_2.66.0              ##  [21] textshaping_1.0.0           Cairo_1.6-2                 ##  [23] spatstat.explore_3.4-2      fastDummies_1.7.5           ##  [25] labeling_0.4.3              prismatic_1.1.2             ##  [27] sass_0.4.9                  spatstat.data_3.1-6         ##  [29] proxy_0.4-27                ggridges_0.5.6              ##  [31] pbapply_1.7-2               pkgdown_2.1.1               ##  [33] systemfonts_1.2.2           foreign_0.8-90              ##  [35] R.utils_2.13.0              dichromat_2.0-0.1           ##  [37] parallelly_1.43.0           maps_3.4.2.1                ##  [39] pals_1.10                   rstudioapi_0.17.1           ##  [41] generics_0.1.3              shape_1.4.6.1               ##  [43] ica_1.0-3                   spatstat.random_3.3-3       ##  [45] dplyr_1.1.4                 Matrix_1.7-3                ##  [47] ggbeeswarm_0.7.2            S4Vectors_0.44.0            ##  [49] abind_1.4-8                 R.methodsS3_1.8.2           ##  [51] lifecycle_1.0.4             yaml_2.3.10                 ##  [53] snakecase_0.11.1            SummarizedExperiment_1.36.0 ##  [55] recipes_1.2.1               SparseArray_1.6.2           ##  [57] Rtsne_0.17                  paletteer_1.6.0             ##  [59] grid_4.4.3                  promises_1.3.2              ##  [61] crayon_1.5.3                miniUI_0.1.1.1              ##  [63] lattice_0.22-7              cowplot_1.1.3               ##  [65] mapproj_1.2.11              pillar_1.10.2               ##  [67] knitr_1.50                  ComplexHeatmap_2.22.0       ##  [69] GenomicRanges_1.58.0        rjson_0.2.23                ##  [71] boot_1.3-31                 future.apply_1.11.3         ##  [73] codetools_0.2-20            glue_1.8.0                  ##  [75] spatstat.univar_3.1-2       data.table_1.17.0           ##  [77] vctrs_0.6.5                 png_0.1-8                   ##  [79] spam_2.11-1                 Rdpack_2.6.4                ##  [81] gtable_0.3.6                rematch2_2.1.2              ##  [83] assertthat_0.2.1            cachem_1.1.0                ##  [85] gower_1.0.2                 xfun_0.52                   ##  [87] rbibutils_2.3               S4Arrays_1.6.0              ##  [89] mime_0.13                   prodlim_2025.04.28          ##  [91] reformulas_0.4.0            survival_3.8-3              ##  [93] timeDate_4041.110           SingleCellExperiment_1.28.1 ##  [95] iterators_1.0.14            pbmcapply_1.5.1             ##  [97] hardhat_1.4.1               lava_1.8.1                  ##  [99] fitdistrplus_1.2-2          ROCR_1.0-11                 ## [101] ipred_0.9-15                nlme_3.1-168                ## [103] RcppAnnoy_0.0.22            GenomeInfoDb_1.42.3         ## [105] bslib_0.9.0                 irlba_2.3.5.1               ## [107] vipor_0.4.7                 KernSmooth_2.23-26          ## [109] rpart_4.1.24                colorspace_2.1-1            ## [111] BiocGenerics_0.52.0         Hmisc_5.2-3                 ## [113] nnet_7.3-20                 ggrastr_1.0.2               ## [115] tidyselect_1.2.1            compiler_4.4.3              ## [117] htmlTable_2.4.3             desc_1.4.3                  ## [119] DelayedArray_0.32.0         plotly_4.10.4               ## [121] checkmate_2.3.2             scales_1.3.0                ## [123] lmtest_0.9-40               stringr_1.5.1               ## [125] digest_0.6.37               goftest_1.2-3               ## [127] spatstat.utils_3.1-3        minqa_1.2.8                 ## [129] rmarkdown_2.29              XVector_0.46.0              ## [131] htmltools_0.5.8.1           pkgconfig_2.0.3             ## [133] base64enc_0.1-3             lme4_1.1-37                 ## [135] sparseMatrixStats_1.18.0    MatrixGenerics_1.18.1       ## [137] fastmap_1.2.0               rlang_1.1.6                 ## [139] GlobalOptions_0.1.2         htmlwidgets_1.6.4           ## [141] UCSC.utils_1.2.0            shiny_1.10.0                ## [143] DelayedMatrixStats_1.28.1   farver_2.1.2                ## [145] jquerylib_0.1.4             zoo_1.8-14                  ## [147] jsonlite_2.0.0              ModelMetrics_1.2.2.2        ## [149] R.oo_1.27.0                 Formula_1.2-5               ## [151] GenomeInfoDbData_1.2.13     dotCall64_1.2               ## [153] patchwork_1.3.0             munsell_0.5.1               ## [155] Rcpp_1.0.14                 reticulate_1.42.0           ## [157] stringi_1.8.7               pROC_1.18.5                 ## [159] zlibbioc_1.52.0             MASS_7.3-65                 ## [161] plyr_1.8.9                  parallel_4.4.3              ## [163] listenv_0.9.1               ggrepel_0.9.6               ## [165] forcats_1.0.0               deldir_2.0-4                ## [167] splines_4.4.3               tensor_1.5                  ## [169] circlize_0.4.16             igraph_2.1.4                ## [171] spatstat.geom_3.3-6         RcppHNSW_0.6.0              ## [173] reshape2_1.4.4              stats4_4.4.3                ## [175] evaluate_1.0.3              ggprism_1.0.5               ## [177] nloptr_2.2.1                foreach_1.5.2               ## [179] httpuv_1.6.15               RANN_2.6.2                  ## [181] tidyr_1.3.1                 purrr_1.0.4                 ## [183] polyclip_1.10-7             clue_0.3-66                 ## [185] scattermore_1.2             janitor_2.2.1               ## [187] xtable_1.8-4                monocle3_1.3.7              ## [189] e1071_1.7-16                RSpectra_0.16-2             ## [191] later_1.4.2                 viridisLite_0.4.2           ## [193] class_7.3-23                ragg_1.4.0                  ## [195] tibble_3.2.1                beeswarm_0.4.0              ## [197] IRanges_2.40.1              cluster_2.1.8.1             ## [199] timechange_0.3.0            globals_0.16.3              ## [201] caret_7.0-1 getwd() ## [1] \"/Users/sfurlan/develop/viewmastR/vignettes\""},{"path":"https://furlan-lab.github.io/viewmastR/articles/BigQuery.html","id":"installing-rust","dir":"Articles","previous_headings":"","what":"Installing Rust","title":"How to use viewmastR with large query objects","text":"First need updated Rust installation. Go site learn install Rust.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/articles/BigQuery.html","id":"installing-viewmastr","dir":"Articles","previous_headings":"","what":"Installing viewmastR","title":"How to use viewmastR with large query objects","text":"need devtools package installed…","code":"devtools::install_github(\"furlan-lab/viewmastR\")"},{"path":"https://furlan-lab.github.io/viewmastR/articles/BigQuery.html","id":"running-viewmastr","dir":"Articles","previous_headings":"","what":"Running viewmastR","title":"How to use viewmastR with large query objects","text":"","code":"suppressPackageStartupMessages({ library(viewmastR) library(Seurat) library(ggplot2) })  #query dataset seu <- readRDS(file.path(ROOT_DIR1, \"240813_final_object.RDS\")) #reference dataset seur<-readRDS(file.path(ROOT_DIR2, \"230329_rnaAugmented_seurat.RDS\")) vg <- get_selected_features(seu)"},{"path":"https://furlan-lab.github.io/viewmastR/articles/BigQuery.html","id":"build-the-model-and-infer-for-small-dataset-not-using-chunks-and-parallelization","dir":"Articles","previous_headings":"","what":"Build the model and infer for small dataset (not using chunks and parallelization)","title":"How to use viewmastR with large query objects","text":"also covered elsewhere","code":"results <- viewmastR(seu, seur, ref_celldata_col = \"SFClassification\", selected_features = vg, max_epochs = 4, train_only = T)    seu<-viewmastR_infer(seu, results[[\"model_dir\"]], vg, labels = levels(factor(seur$SFClassification)), batch_size = 250) DimPlot(seu, group.by = \"viewmastR_inferred\", cols = seur@misc$colors)"},{"path":"https://furlan-lab.github.io/viewmastR/articles/BigQuery.html","id":"build-the-model-and-infer-for-large-dataset-dividing-the-query-into-chunks-and-using-parallelization","dir":"Articles","previous_headings":"","what":"Build the model and infer for large dataset (dividing the query into chunks and using parallelization)","title":"How to use viewmastR with large query objects","text":"using chunks workers, can infer model chunks time using multiple workers parallel.  see difference parallelization used","code":"options(future.globals.maxSize = 16 * 1024^3) seu<-viewmastR_infer(seu, results[[\"model_dir\"]], query_celldata_col = \"viewmastR_inferred_parallel\", vg, labels = levels(factor(seur$SFClassification)), chunks = 4, workers = 4) DimPlot(seu, group.by = \"viewmastR_inferred_parallel\", cols = seur@misc$colors) confusion_matrix(pred = factor(seu$viewmastR_inferred), gt = factor(seu$viewmastR_inferred_parallel), cols = seur@misc$colors)"},{"path":"https://furlan-lab.github.io/viewmastR/articles/BigQuery.html","id":"bigger-dataset","dir":"Articles","previous_headings":"","what":"Bigger dataset","title":"How to use viewmastR with large query objects","text":"optimising chunk size, workers batch size, can achieve faster results big datasets. just inferring back larger reference set (larger, advisable normal practice)","code":"seur<-viewmastR_infer(seur, results[[\"model_dir\"]], query_celldata_col = \"viewmastR_inferred_parallel\", vg, labels = levels(factor(seur$SFClassification)), chunks = 20, workers = 16, batch_size = 3000) DimPlot(seur, group.by = \"viewmastR_inferred_parallel\", cols = seur@misc$colors) confusion_matrix(pred = factor(seur$SFClassification), gt = factor(seur$viewmastR_inferred_parallel), cols = seur@misc$colors)"},{"path":"https://furlan-lab.github.io/viewmastR/articles/BulkReference.html","id":"installing-rust","dir":"Articles","previous_headings":"","what":"Installing Rust","title":"How to use a bulk dataset as a reference for viewmastR","text":"First need updated Rust installation. Go site learn install Rust.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/articles/BulkReference.html","id":"installing-viewmastr","dir":"Articles","previous_headings":"","what":"Installing viewmastR","title":"How to use a bulk dataset as a reference for viewmastR","text":"need devtools package installed…","code":"devtools::install_github(\"furlan-lab/viewmastR\")"},{"path":"https://furlan-lab.github.io/viewmastR/articles/BulkReference.html","id":"load-a-few-datasets","dir":"Articles","previous_headings":"","what":"Load a few datasets","title":"How to use a bulk dataset as a reference for viewmastR","text":"","code":"suppressPackageStartupMessages({ library(viewmastR) library(Seurat)   library(SeuratObject) library(ggplot2) library(scCustomize) library(magrittr) library(SummarizedExperiment) })  #malignant ref (bulk) seuMR<-readRDS(file.path(ROOT_DIR1, \"240126_AML_object.RDS\")) seMR<-readRDS(file.path(ROOT_DIR1, \"240126_Combined_SE_Object.RDS\"))  #healthy ref (sc) seuHR <- readRDS(file.path(ROOT_DIR3, \"230329_rnaAugmented_seurat.RDS\"))  #query dataset seuP<-readRDS(file.path(ROOT_DIR2, \"220831_ptdata.RDS\"))"},{"path":"https://furlan-lab.github.io/viewmastR/articles/BulkReference.html","id":"make-a-bulk-classifier","dir":"Articles","previous_headings":"","what":"Make a bulk classifier","title":"How to use a bulk dataset as a reference for viewmastR","text":"can see classifies cells scRNAseq experiment. first done loading data creating [Summarized Experiment] (https://bioconductor.org/packages/release/bioc/html/SummarizedExperiment.html). remove malignant/modified cells reference. function “splat_bulk_reference” takes SummarizedExperiment returns Seurat object made generating pseudo-single-cell data can used reference viewmastR. invoke viewmastR. Although necessary, can visualize UMAP single-cellified bulk reference using standard Seurat workflow. Finally, can visualize bulk viewmastR classification result compared published cell labels. , see fairly faithful overlap, bulk reference contain samples celltypes, cells plasma cells cDCs called celltypes.","code":"dat<-read.table(allcounts, header = T) rownames(dat)<-dat$X_TranscriptID dat$X_TranscriptID<-NULL metad<-data.frame(sample = strsplit(colnames(dat), \"\\\\.\") %>% sapply(\"[[\", 1), celltype = strsplit(colnames(dat), \"\\\\.\") %>% sapply(\"[[\", 2)) rowd<-DataFrame(gene_short_name = rownames(dat), row.names = rownames(dat)) obj<-SummarizedExperiment::SummarizedExperiment(assays = list(counts=dat), rowData = rowd, colData = metad)   #remove samples we don't want obj<-obj[,!grepl(\"^Blast\", obj$celltype)] #blasts obj<-obj[,!grepl(\"^rHSC\", obj$celltype)] #recombinant HSCs obj<-obj[,!grepl(\"^LSC\", obj$celltype)] #leukemia stem cells #obj<-obj[,obj$sample %in% c(\"X5852\", \"X5483\")] #two donors  #undebug(splat_bulk_reference) seuF<-splat_bulk_reference(seuHR, obj, N=200)  seuF<-NormalizeData(seuF) seuF <- FindVariableFeatures(seuF,  nfeatures = 1000, assay = \"RNA\") seuF <- ScaleData(seuF) %>% RunPCA(features = VariableFeatures(object = seuF), npcs = 100) ElbowPlot(seuF, 100) seuF<- FindNeighbors(seuF, dims = 1:20) seuF <- FindClusters(seuF, resolution = 1.1) ## Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck ##  ## Number of nodes: 9800 ## Number of edges: 362310 ##  ## Running Louvain algorithm... ## Maximum modularity in 10 random starts: 0.9502 ## Number of communities: 34 ## Elapsed time: 0 seconds seuF <- RunUMAP(seuF, dims = 1:20, n.components = 2, min.dist = 0.6) DimPlot(seuF, group.by = \"celltype\", cols = as.character(pals::polychrome(20))) DimPlot(seuF, group.by = \"sample\", cols = as.character(pals::polychrome(20))) seuF<-calculate_gene_dispersion(seuF) seuF<-select_features(seuF, top_n = 10000, logmean_ul = -1, logmean_ll = -8) vgr<-get_selected_features(seuF) seuHR<-calculate_gene_dispersion(seuHR) seuHR<-select_features(seuHR, top_n = 10000, logmean_ul = -1, logmean_ll = -8) vgq<-get_selected_features(seuHR) vg<-intersect(vgq, vgr)  seuHR<-viewmastR::viewmastR(query_cds = seuHR, ref_cds = seuF, ref_celldata_col = \"celltype\", selected_features = vg) cols<-c(seuHR@misc$colors[c(14,18,20,6,5,3,7,1,5,2,11)], \"cyan\", seuHR@misc$colors[c(21)]) names(cols)<-levels(factor(seuF$celltype))  DimPlot_scCustom(seuHR, group.by = \"viewmastR_pred\", colors_use  = cols, label = T, repel = T, label.box = T, label.color = \"white\") DimPlot_scCustom(seuHR, group.by = \"SFClassification\", colors_use  = seuHR@misc$colors, label = T, repel = T, label.box = T, label.color = \"white\")"},{"path":"https://furlan-lab.github.io/viewmastR/articles/BulkReference.html","id":"lets-look-at-a-patient","dir":"Articles","previous_headings":"","what":"Let’s look at a patient","title":"How to use a bulk dataset as a reference for viewmastR","text":"patient post transplant evidence chimerism. Let’s run viewmastR using reference healthy BM cells see cells annotate","code":"seuP<-calculate_gene_dispersion(seuP) seuP<-select_features(seuP, top_n = 10000, logmean_ul = -1, logmean_ll = -8) vgr<-get_selected_features(seuP) seuHR<-calculate_gene_dispersion(seuHR) seuHR<-select_features(seuHR, top_n = 10000, logmean_ul = -1, logmean_ll = -8) vgq<-get_selected_features(seuHR) vg<-intersect(vgq, vgr) seuP<-viewmastR::viewmastR(query_cds = seuP, ref_cds = seuHR, ref_celldata_col = \"SFClassification\", selected_features = vg)  DimPlot_scCustom(seuP, group.by = \"viewmastR_pred\", colors_use = seuHR@misc$colors) seuP$geno_label<-seuP$geno seuP$geno_label[seuP$geno %in% \"0\"]<-\"Donor\" seuP$geno_label[seuP$geno %in% \"1\"]<-\"Recipient\" DimPlot_scCustom(seuP, group.by = \"geno_label\")"},{"path":"https://furlan-lab.github.io/viewmastR/articles/BulkReference.html","id":"interesting-that-we-see-some-lymphoidb-signature-in-this-patient-with-a-runx1-runx1t1-fusion","dir":"Articles","previous_headings":"","what":"Interesting that we see some lymphoid/B signature in this patient with a RUNX1-RUNX1T1 fusion","title":"How to use a bulk dataset as a reference for viewmastR","text":"","code":"Idents(seuP)<-seuP$viewmastR_pred #levels(factor(as.character(seuP$viewmastR_pred))) Cluster_Highlight_Plot(seuP, cluster_name = \"06_CLP\", highlight_color = seuHR@misc$colors) Cluster_Highlight_Plot(seuP, cluster_name = \"13_Pre.B\", highlight_color = seuHR@misc$colors) Cluster_Highlight_Plot(seuP, cluster_name = \"14_B\", highlight_color = seuHR@misc$colors)"},{"path":"https://furlan-lab.github.io/viewmastR/articles/BulkReference.html","id":"lets-investigate-how-the-tumor-annotates-using-a-bulk-reference-of-leukemia-cases","dir":"Articles","previous_headings":"","what":"Let’s investigate how the tumor annotates using a bulk reference of leukemia cases","title":"How to use a bulk dataset as a reference for viewmastR","text":"First pare data min 3 max 20 cases per leukemia subgroup. make 10 cells case, use resulting reference classify patient sample. seems Ph signature case even though majority tumor cells annotate correctly RUNX1-RUNX1T1","code":"obj<-seMR #rowData(obj) sttk<-names(table(obj$final_group))[table(obj$final_group)>3] sttk<-sttk[!sttk %in% \"Other\"] case_max<-20  obj<-obj[,obj$final_group %in% sttk] ds<-names(table(obj$final_group))[table(obj$final_group)>20] ctk<-lapply(names(table(obj$final_group)), function(type){   cases<-which(obj$final_group %in% type)   if (length(cases)>case_max){     cases<-sample(cases, case_max)   }   cases }) obj<-obj[,unlist(ctk)[order(unlist(ctk))]] #table(obj$final_group)  #debug(splat_bulk_reference) seuF<-splat_bulk_reference(seuP, obj, N=10)  seuF<-NormalizeData(seuF) seuF <- FindVariableFeatures(seuF,  nfeatures = 1000, assay = \"RNA\") seuF <- ScaleData(seuF) %>% RunPCA(features = VariableFeatures(object = seuF), npcs = 100) ElbowPlot(seuF, 100) seuF<- FindNeighbors(seuF, dims = 1:20) seuF <- FindClusters(seuF, resolution = 1.1) ## Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck ##  ## Number of nodes: 7360 ## Number of edges: 199488 ##  ## Running Louvain algorithm... ## Maximum modularity in 10 random starts: 0.9069 ## Number of communities: 35 ## Elapsed time: 0 seconds seuF <- RunUMAP(seuF, dims = 1:20, n.components = 2, min.dist = 0.2) seuF<-calculate_gene_dispersion(seuF) seuF<-select_features(seuF, top_n = 10000, logmean_ul = -1, logmean_ll = -8) vgr<-get_selected_features(seuF) seuP<-calculate_gene_dispersion(seuP) seuP<-select_features(seuP, top_n = 10000, logmean_ul = -1, logmean_ll = -8) vgq<-get_selected_features(seuP) vg<-intersect(vgq, vgr)  seuP<-viewmastR::viewmastR(query_cds = seuP, ref_cds = seuF, ref_celldata_col = \"final_group\", selected_features = vg)  thresh<-100 seuP$pred_thresh<-seuP$viewmastR_pred seuP$pred_thresh[seuP$pred_thresh %in% names(table(seuP$viewmastR_pred))[table(seuP$viewmastR_pred)<thresh]]<-\"Other\" DimPlot_scCustom(seuP, group.by = \"pred_thresh\")"},{"path":"https://furlan-lab.github.io/viewmastR/articles/BulkReference.html","id":"appendix","dir":"Articles","previous_headings":"","what":"Appendix","title":"How to use a bulk dataset as a reference for viewmastR","text":"","code":"sessionInfo() ## R version 4.4.3 (2025-02-28) ## Platform: aarch64-apple-darwin20 ## Running under: macOS Sequoia 15.4.1 ##  ## Matrix products: default ## BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib  ## LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0 ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## time zone: America/Los_Angeles ## tzcode source: internal ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] future_1.40.0               SummarizedExperiment_1.36.0 ##  [3] Biobase_2.66.0              GenomicRanges_1.58.0        ##  [5] GenomeInfoDb_1.42.3         IRanges_2.40.1              ##  [7] S4Vectors_0.44.0            BiocGenerics_0.52.0         ##  [9] MatrixGenerics_1.18.1       matrixStats_1.5.0           ## [11] magrittr_2.0.3              scCustomize_3.0.1           ## [13] ggplot2_3.5.2               Seurat_5.2.1                ## [15] SeuratObject_5.0.2          sp_2.2-0                    ## [17] viewmastR_0.3.0             ##  ## loaded via a namespace (and not attached): ##   [1] fs_1.6.5                    spatstat.sparse_3.1-0       ##   [3] RcppMsgPack_0.2.4           lubridate_1.9.4             ##   [5] httr_1.4.7                  RColorBrewer_1.1-3          ##   [7] doParallel_1.0.17           tools_4.4.3                 ##   [9] sctransform_0.4.1           backports_1.5.0             ##  [11] R6_2.6.1                    lazyeval_0.2.2              ##  [13] uwot_0.2.3                  GetoptLong_1.0.5            ##  [15] withr_3.0.2                 gridExtra_2.3               ##  [17] progressr_0.15.1            cli_3.6.4                   ##  [19] textshaping_1.0.0           spatstat.explore_3.4-2      ##  [21] fastDummies_1.7.5           prismatic_1.1.2             ##  [23] labeling_0.4.3              sass_0.4.9                  ##  [25] spatstat.data_3.1-6         ggridges_0.5.6              ##  [27] pbapply_1.7-2               pkgdown_2.1.1               ##  [29] systemfonts_1.2.2           foreign_0.8-90              ##  [31] R.utils_2.13.0              dichromat_2.0-0.1           ##  [33] parallelly_1.43.0           maps_3.4.2.1                ##  [35] pals_1.10                   rstudioapi_0.17.1           ##  [37] generics_0.1.3              shape_1.4.6.1               ##  [39] ica_1.0-3                   spatstat.random_3.3-3       ##  [41] dplyr_1.1.4                 Matrix_1.7-3                ##  [43] ggbeeswarm_0.7.2            abind_1.4-8                 ##  [45] R.methodsS3_1.8.2           lifecycle_1.0.4             ##  [47] yaml_2.3.10                 snakecase_0.11.1            ##  [49] recipes_1.2.1               SparseArray_1.6.2           ##  [51] Rtsne_0.17                  paletteer_1.6.0             ##  [53] grid_4.4.3                  promises_1.3.2              ##  [55] crayon_1.5.3                miniUI_0.1.1.1              ##  [57] lattice_0.22-7              cowplot_1.1.3               ##  [59] mapproj_1.2.11              pillar_1.10.2               ##  [61] knitr_1.50                  ComplexHeatmap_2.22.0       ##  [63] rjson_0.2.23                boot_1.3-31                 ##  [65] future.apply_1.11.3         codetools_0.2-20            ##  [67] glue_1.8.0                  spatstat.univar_3.1-2       ##  [69] data.table_1.17.0           vctrs_0.6.5                 ##  [71] png_0.1-8                   spam_2.11-1                 ##  [73] Rdpack_2.6.4                gtable_0.3.6                ##  [75] rematch2_2.1.2              assertthat_0.2.1            ##  [77] cachem_1.1.0                gower_1.0.2                 ##  [79] xfun_0.52                   rbibutils_2.3               ##  [81] S4Arrays_1.6.0              mime_0.13                   ##  [83] prodlim_2025.04.28          reformulas_0.4.0            ##  [85] survival_3.8-3              timeDate_4041.110           ##  [87] SingleCellExperiment_1.28.1 iterators_1.0.14            ##  [89] pbmcapply_1.5.1             hardhat_1.4.1               ##  [91] lava_1.8.1                  fitdistrplus_1.2-2          ##  [93] ROCR_1.0-11                 ipred_0.9-15                ##  [95] nlme_3.1-168                RcppAnnoy_0.0.22            ##  [97] bslib_0.9.0                 irlba_2.3.5.1               ##  [99] vipor_0.4.7                 KernSmooth_2.23-26          ## [101] rpart_4.1.24                colorspace_2.1-1            ## [103] Hmisc_5.2-3                 nnet_7.3-20                 ## [105] ggrastr_1.0.2               tidyselect_1.2.1            ## [107] compiler_4.4.3              htmlTable_2.4.3             ## [109] desc_1.4.3                  DelayedArray_0.32.0         ## [111] plotly_4.10.4               checkmate_2.3.2             ## [113] scales_1.3.0                lmtest_0.9-40               ## [115] stringr_1.5.1               digest_0.6.37               ## [117] goftest_1.2-3               spatstat.utils_3.1-3        ## [119] minqa_1.2.8                 rmarkdown_2.29              ## [121] XVector_0.46.0              htmltools_0.5.8.1           ## [123] pkgconfig_2.0.3             base64enc_0.1-3             ## [125] lme4_1.1-37                 sparseMatrixStats_1.18.0    ## [127] fastmap_1.2.0               rlang_1.1.6                 ## [129] GlobalOptions_0.1.2         htmlwidgets_1.6.4           ## [131] UCSC.utils_1.2.0            shiny_1.10.0                ## [133] DelayedMatrixStats_1.28.1   farver_2.1.2                ## [135] jquerylib_0.1.4             zoo_1.8-14                  ## [137] jsonlite_2.0.0              ModelMetrics_1.2.2.2        ## [139] R.oo_1.27.0                 Formula_1.2-5               ## [141] GenomeInfoDbData_1.2.13     dotCall64_1.2               ## [143] patchwork_1.3.0             munsell_0.5.1               ## [145] Rcpp_1.0.14                 reticulate_1.42.0           ## [147] stringi_1.8.7               pROC_1.18.5                 ## [149] zlibbioc_1.52.0             MASS_7.3-65                 ## [151] plyr_1.8.9                  parallel_4.4.3              ## [153] listenv_0.9.1               ggrepel_0.9.6               ## [155] forcats_1.0.0               deldir_2.0-4                ## [157] splines_4.4.3               tensor_1.5                  ## [159] circlize_0.4.16             igraph_2.1.4                ## [161] spatstat.geom_3.3-6         RcppHNSW_0.6.0              ## [163] reshape2_1.4.4              evaluate_1.0.3              ## [165] ggprism_1.0.5               nloptr_2.2.1                ## [167] foreach_1.5.2               httpuv_1.6.15               ## [169] RANN_2.6.2                  tidyr_1.3.1                 ## [171] purrr_1.0.4                 polyclip_1.10-7             ## [173] clue_0.3-66                 scattermore_1.2             ## [175] janitor_2.2.1               xtable_1.8-4                ## [177] monocle3_1.3.7              RSpectra_0.16-2             ## [179] later_1.4.2                 viridisLite_0.4.2           ## [181] class_7.3-23                ragg_1.4.0                  ## [183] tibble_3.2.1                beeswarm_0.4.0              ## [185] cluster_2.1.8.1             timechange_0.3.0            ## [187] globals_0.16.3              caret_7.0-1 getwd() ## [1] \"/Users/sfurlan/develop/viewmastR/vignettes\""},{"path":"https://furlan-lab.github.io/viewmastR/articles/HowTo.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"How to use viewmastR","text":"begin, ensure updated Rust installation, ’s core dependency. can follow instructions provided official Rust installation page.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/articles/HowTo.html","id":"installing-viewmastr","dir":"Articles","previous_headings":"","what":"Installing viewmastR","title":"How to use viewmastR","text":"First, ensure devtools R package installed, allows install packages GitHub. devtools installed, can easily install viewmastR using following command: fetch latest version viewmastR GitHub install .","code":"devtools::install_github(\"furlan-lab/viewmastR\")"},{"path":"https://furlan-lab.github.io/viewmastR/articles/HowTo.html","id":"running-viewmastr","dir":"Articles","previous_headings":"","what":"Running viewmastR","title":"How to use viewmastR","text":"section, ’ll load two Seurat objects: - Query dataset (seu): Contains data want classify. - Reference dataset (seur): Contains known cell type labels used train model. ViewmastR predicts cell types query dataset leveraging features associated cell type labels reference data.","code":"# Load required packages suppressPackageStartupMessages({   library(viewmastR)   library(Seurat)   library(ggplot2)   library(scCustomize) })   # Load query and reference datasets seu <- readRDS(file.path(ROOT_DIR1, \"240813_final_object.RDS\")) seur <- readRDS(file.path(ROOT_DIR2, \"230329_rnaAugmented_seurat.RDS\"))"},{"path":"https://furlan-lab.github.io/viewmastR/articles/HowTo.html","id":"defining-ground-truth-in-the-query-dataset","dir":"Articles","previous_headings":"","what":"Defining “Ground Truth” in the Query Dataset","title":"How to use viewmastR","text":"Although don’t know cell type labels query dataset priori, can approximate ground truth using cluster-based cell type assignments. approximation help us evaluate accuracy viewmastR’s predictions. can visualize query dataset ground truth labels get initial idea cell types ’re working .","code":"DimPlot(seu, group.by = \"ground_truth\", cols = seur@misc$colors)"},{"path":"https://furlan-lab.github.io/viewmastR/articles/HowTo.html","id":"finding-common-features","dir":"Articles","previous_headings":"","what":"Finding Common Features","title":"How to use viewmastR","text":"performance viewmastR enhanced features (genes) consistent query reference datasets. ’ll now identify select highly variable genes datasets find common genes use training model.","code":"# Calculate and plot gene dispersion in query dataset seu <- calculate_gene_dispersion(seu) plot_gene_dispersion(seu) seu <- select_features(seu, top_n = 10000, logmean_ul = -1, logmean_ll = -8) plot_gene_dispersion(seu) vgq <- get_selected_features(seu)  # Repeat the process for the reference dataset seur <- calculate_gene_dispersion(seur) plot_gene_dispersion(seur) seur <- select_features(seur, top_n = 10000, logmean_ul = -1, logmean_ll = -8) plot_gene_dispersion(seur) vgr <- get_selected_features(seur)  # Find common genes vg <- intersect(vgq, vgr)"},{"path":"https://furlan-lab.github.io/viewmastR/articles/HowTo.html","id":"visualizing-reference-cell-types","dir":"Articles","previous_headings":"","what":"Visualizing Reference Cell Types","title":"How to use viewmastR","text":"Next, visualize reference dataset see known cell type classifications viewmastR use train model.","code":"DimPlot(seur, group.by = \"SFClassification\", cols = seur@misc$colors)"},{"path":"https://furlan-lab.github.io/viewmastR/articles/HowTo.html","id":"running-viewmastr-1","dir":"Articles","previous_headings":"","what":"Running viewmastR","title":"How to use viewmastR","text":"Now run viewmastR predict cell types query dataset. function learn reference dataset’s cell type annotations apply knowledge classify query cells.","code":"seu <- viewmastR(seu, seur, ref_celldata_col = \"SFClassification\", selected_features = vg, max_epochs = 4)"},{"path":"https://furlan-lab.github.io/viewmastR/articles/HowTo.html","id":"visualizing-predictions","dir":"Articles","previous_headings":"","what":"Visualizing Predictions","title":"How to use viewmastR","text":"running viewmastR, can visualize predicted cell types query dataset.","code":"DimPlot(seu, group.by = \"viewmastR_pred\", cols = seur@misc$colors)"},{"path":"https://furlan-lab.github.io/viewmastR/articles/HowTo.html","id":"evaluating-model-accuracy-with-a-confusion-matrix","dir":"Articles","previous_headings":"","what":"Evaluating Model Accuracy with a Confusion Matrix","title":"How to use viewmastR","text":"can evaluate accuracy viewmastR’s predictions comparing ground truth labels (approximated earlier) using confusion matrix.","code":"confusion_matrix(pred = factor(seu$viewmastR_pred), gt = factor(seu$ground_truth), cols = seur@misc$colors)"},{"path":"https://furlan-lab.github.io/viewmastR/articles/HowTo.html","id":"analyzing-training-performance","dir":"Articles","previous_headings":"","what":"Analyzing Training Performance","title":"How to use viewmastR","text":"ViewmastR can also return detailed training history, including metrics like training loss validation loss time. helps diagnose overfitting underfitting model training. access metrics, need set return_type parameter \"list\". ’s example retrieve plot training data: can now visualize training validation losses change epochs. training loss keeps decreasing validation loss plateaus increases, may indicate overfitting.","code":"# Run viewmastR with return_type = \"list\" output_list <- viewmastR(seu, seur, ref_celldata_col = \"SFClassification\", selected_features = vg, return_type = \"list\")  # Plot training data plot_training_data(output_list) plt <- plot_training_data(output_list) plt"},{"path":"https://furlan-lab.github.io/viewmastR/articles/HowTo.html","id":"probabilities","dir":"Articles","previous_headings":"","what":"Probabilities","title":"How to use viewmastR","text":"Finally, can also look prediction probabilities using return_probs argument. add meta-data columns object prefixed string “probs_” class prediction. values transformed log-odds model prediction transformed using plogis function R.","code":"seu <- viewmastR(seu, seur, ref_celldata_col = \"SFClassification\", selected_features = vg, backend = \"candle\", max_epochs = 4, return_probs = T) FeaturePlot_scCustom(seu, features = \"prob_14_B\") FeaturePlot_scCustom(seu, features = \"prob_16_CD8.N\")"},{"path":"https://furlan-lab.github.io/viewmastR/articles/HowTo.html","id":"appendix","dir":"Articles","previous_headings":"","what":"Appendix","title":"How to use viewmastR","text":"","code":"sessionInfo() ## R version 4.4.3 (2025-02-28) ## Platform: aarch64-apple-darwin20 ## Running under: macOS Sequoia 15.4.1 ##  ## Matrix products: default ## BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib  ## LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0 ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## time zone: America/Los_Angeles ## tzcode source: internal ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] scCustomize_3.0.1  ggplot2_3.5.2      Seurat_5.2.1       SeuratObject_5.0.2 ## [5] sp_2.2-0           viewmastR_0.3.0    ##  ## loaded via a namespace (and not attached): ##   [1] fs_1.6.5                    matrixStats_1.5.0           ##   [3] spatstat.sparse_3.1-0       RcppMsgPack_0.2.4           ##   [5] lubridate_1.9.4             httr_1.4.7                  ##   [7] RColorBrewer_1.1-3          doParallel_1.0.17           ##   [9] tools_4.4.3                 sctransform_0.4.1           ##  [11] backports_1.5.0             R6_2.6.1                    ##  [13] lazyeval_0.2.2              uwot_0.2.3                  ##  [15] GetoptLong_1.0.5            withr_3.0.2                 ##  [17] gridExtra_2.3               progressr_0.15.1            ##  [19] cli_3.6.4                   Biobase_2.66.0              ##  [21] textshaping_1.0.0           Cairo_1.6-2                 ##  [23] spatstat.explore_3.4-2      fastDummies_1.7.5           ##  [25] labeling_0.4.3              sass_0.4.9                  ##  [27] spatstat.data_3.1-6         proxy_0.4-27                ##  [29] ggridges_0.5.6              pbapply_1.7-2               ##  [31] pkgdown_2.1.1               systemfonts_1.2.2           ##  [33] foreign_0.8-90              R.utils_2.13.0              ##  [35] parallelly_1.43.0           rstudioapi_0.17.1           ##  [37] generics_0.1.3              shape_1.4.6.1               ##  [39] crosstalk_1.2.1             ica_1.0-3                   ##  [41] spatstat.random_3.3-3       dplyr_1.1.4                 ##  [43] Matrix_1.7-3                ggbeeswarm_0.7.2            ##  [45] S4Vectors_0.44.0            abind_1.4-8                 ##  [47] R.methodsS3_1.8.2           lifecycle_1.0.4             ##  [49] yaml_2.3.10                 snakecase_0.11.1            ##  [51] SummarizedExperiment_1.36.0 recipes_1.2.1               ##  [53] SparseArray_1.6.2           Rtsne_0.17                  ##  [55] paletteer_1.6.0             grid_4.4.3                  ##  [57] promises_1.3.2              crayon_1.5.3                ##  [59] miniUI_0.1.1.1              lattice_0.22-7              ##  [61] cowplot_1.1.3               pillar_1.10.2               ##  [63] knitr_1.50                  ComplexHeatmap_2.22.0       ##  [65] GenomicRanges_1.58.0        rjson_0.2.23                ##  [67] boot_1.3-31                 future.apply_1.11.3         ##  [69] codetools_0.2-20            glue_1.8.0                  ##  [71] spatstat.univar_3.1-2       data.table_1.17.0           ##  [73] vctrs_0.6.5                 png_0.1-8                   ##  [75] spam_2.11-1                 Rdpack_2.6.4                ##  [77] gtable_0.3.6                rematch2_2.1.2              ##  [79] assertthat_0.2.1            cachem_1.1.0                ##  [81] gower_1.0.2                 xfun_0.52                   ##  [83] rbibutils_2.3               S4Arrays_1.6.0              ##  [85] mime_0.13                   prodlim_2025.04.28          ##  [87] reformulas_0.4.0            survival_3.8-3              ##  [89] timeDate_4041.110           SingleCellExperiment_1.28.1 ##  [91] iterators_1.0.14            pbmcapply_1.5.1             ##  [93] hardhat_1.4.1               lava_1.8.1                  ##  [95] fitdistrplus_1.2-2          ROCR_1.0-11                 ##  [97] ipred_0.9-15                nlme_3.1-168                ##  [99] RcppAnnoy_0.0.22            GenomeInfoDb_1.42.3         ## [101] bslib_0.9.0                 irlba_2.3.5.1               ## [103] vipor_0.4.7                 KernSmooth_2.23-26          ## [105] rpart_4.1.24                colorspace_2.1-1            ## [107] BiocGenerics_0.52.0         Hmisc_5.2-3                 ## [109] nnet_7.3-20                 ggrastr_1.0.2               ## [111] tidyselect_1.2.1            compiler_4.4.3              ## [113] htmlTable_2.4.3             desc_1.4.3                  ## [115] DelayedArray_0.32.0         plotly_4.10.4               ## [117] checkmate_2.3.2             scales_1.3.0                ## [119] lmtest_0.9-40               stringr_1.5.1               ## [121] digest_0.6.37               goftest_1.2-3               ## [123] spatstat.utils_3.1-3        minqa_1.2.8                 ## [125] rmarkdown_2.29              XVector_0.46.0              ## [127] htmltools_0.5.8.1           pkgconfig_2.0.3             ## [129] base64enc_0.1-3             lme4_1.1-37                 ## [131] sparseMatrixStats_1.18.0    MatrixGenerics_1.18.1       ## [133] fastmap_1.2.0               rlang_1.1.6                 ## [135] GlobalOptions_0.1.2         htmlwidgets_1.6.4           ## [137] UCSC.utils_1.2.0            shiny_1.10.0                ## [139] DelayedMatrixStats_1.28.1   farver_2.1.2                ## [141] jquerylib_0.1.4             zoo_1.8-14                  ## [143] jsonlite_2.0.0              ModelMetrics_1.2.2.2        ## [145] R.oo_1.27.0                 magrittr_2.0.3              ## [147] Formula_1.2-5               GenomeInfoDbData_1.2.13     ## [149] dotCall64_1.2               patchwork_1.3.0             ## [151] munsell_0.5.1               Rcpp_1.0.14                 ## [153] reticulate_1.42.0           stringi_1.8.7               ## [155] pROC_1.18.5                 zlibbioc_1.52.0             ## [157] MASS_7.3-65                 plyr_1.8.9                  ## [159] parallel_4.4.3              listenv_0.9.1               ## [161] ggrepel_0.9.6               forcats_1.0.0               ## [163] deldir_2.0-4                splines_4.4.3               ## [165] tensor_1.5                  circlize_0.4.16             ## [167] igraph_2.1.4                spatstat.geom_3.3-6         ## [169] RcppHNSW_0.6.0              reshape2_1.4.4              ## [171] stats4_4.4.3                evaluate_1.0.3              ## [173] ggprism_1.0.5               nloptr_2.2.1                ## [175] foreach_1.5.2               httpuv_1.6.15               ## [177] RANN_2.6.2                  tidyr_1.3.1                 ## [179] purrr_1.0.4                 polyclip_1.10-7             ## [181] future_1.40.0               clue_0.3-66                 ## [183] scattermore_1.2             janitor_2.2.1               ## [185] xtable_1.8-4                monocle3_1.3.7              ## [187] e1071_1.7-16                RSpectra_0.16-2             ## [189] later_1.4.2                 viridisLite_0.4.2           ## [191] class_7.3-23                ragg_1.4.0                  ## [193] tibble_3.2.1                beeswarm_0.4.0              ## [195] IRanges_2.40.1              cluster_2.1.8.1             ## [197] timechange_0.3.0            globals_0.16.3              ## [199] caret_7.0-1 getwd() ## [1] \"/Users/sfurlan/develop/viewmastR/vignettes\""},{"path":"https://furlan-lab.github.io/viewmastR/articles/InDepth.html","id":"a-deeper-look-at-viewmastr","dir":"Articles","previous_headings":"","what":"A Deeper Look at viewmastR","title":"A deeper look at viewmastR","text":"diving viewmastR works, let’s first set necessary environment go essential functions streamline training analysis workflow.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/articles/InDepth.html","id":"installing-rust","dir":"Articles","previous_headings":"A Deeper Look at viewmastR","what":"1. Installing Rust","title":"A deeper look at viewmastR","text":"using viewmastR, ’ll need updated installation Rust, ’s core dependency. Follow instructions official Rust installation page set Rust system.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/articles/InDepth.html","id":"installing-viewmastr","dir":"Articles","previous_headings":"A Deeper Look at viewmastR","what":"2. Installing viewmastR","title":"A deeper look at viewmastR","text":"Rust installed, can install viewmastR directly GitHub. Ensure devtools package installed, use following command:","code":"devtools::install_github(\"furlan-lab/viewmastR\")"},{"path":"https://furlan-lab.github.io/viewmastR/articles/InDepth.html","id":"viewing-the-training-history","dir":"Articles","previous_headings":"A Deeper Look at viewmastR","what":"3. Viewing the Training History","title":"A deeper look at viewmastR","text":"viewmastR tracks key data training process, can accessed setting return_type parameter \"list\". returns: 1. query object predicted cell types. 2. training results. ’s can retrieve visualize training data:","code":"suppressPackageStartupMessages({   library(viewmastR)   library(Seurat)   library(ggplot2)   library(scCustomize)   library(plotly) })  # Load query and reference datasets seu <- readRDS(file.path(ROOT_DIR1, \"240813_final_object.RDS\")) vg <- get_selected_features(seu) seur <- readRDS(file.path(ROOT_DIR2, \"230329_rnaAugmented_seurat.RDS\"))  # View training history output_list <- viewmastR(seu, seur, ref_celldata_col = \"SFClassification\", selected_features = vg, return_type = \"list\")"},{"path":"https://furlan-lab.github.io/viewmastR/articles/InDepth.html","id":"visualizing-training-data","dir":"Articles","previous_headings":"A Deeper Look at viewmastR > 3. Viewing the Training History","what":"Visualizing Training Data","title":"A deeper look at viewmastR","text":"plot training vs validation loss, can use following: rendering plot without details: Tip: training loss decreases validation loss plateaus, may indicate overfitting.","code":"plot_training_data(output_list) plt <- plot_training_data(output_list) plt"},{"path":"https://furlan-lab.github.io/viewmastR/articles/InDepth.html","id":"tuning-for-speed","dir":"Articles","previous_headings":"A Deeper Look at viewmastR","what":"4. Tuning for Speed","title":"A deeper look at viewmastR","text":"viewmastR runs 3 available backends (see Burn details). hands nd backend tends run faster Apple M1/M2 processors. Note using “auto” backend parameter (default) detect architecture provide best guess backend fastest . want test , ’s can compare performance different backends system:","code":"run1 <- viewmastR(seu, seur, ref_celldata_col = \"SFClassification\", selected_features = vg, max_epochs = 3, backend = \"candle\", return_type = \"list\") run2 <- viewmastR(seu, seur, ref_celldata_col = \"SFClassification\", selected_features = vg, max_epochs = 3, backend = \"wgpu\", return_type = \"list\") run3 <- viewmastR(seu, seur, ref_celldata_col = \"SFClassification\", selected_features = vg, max_epochs = 3, backend = \"nd\", return_type = \"list\")  # Compare training times gp<-ggplot(data.frame(training_times = c(run1$training_output$duration$training_duration,                                     run2$training_output$duration$training_duration,                                     run3$training_output$duration$training_duration),                    backend = c(\"candle\", \"wgpu\", \"nd\")),        aes(x = backend, y = training_times, fill = backend)) +    geom_col() +    theme_bw() +    labs(x = \"Backend\", y = \"Training Time (s)\") +    NoLegend() + ggtitle(paste(\"Arch: \", as.character(Sys.info()[\"machine\"])))    ggplotly(gp)"},{"path":"https://furlan-lab.github.io/viewmastR/articles/InDepth.html","id":"saving-training-subsets","dir":"Articles","previous_headings":"A Deeper Look at viewmastR","what":"5. Saving Training Subsets","title":"A deeper look at viewmastR","text":"inspect training test data used viewmastR provide setup_training function desire evaluate using learning frameworks.","code":"ti <- setup_training(seu, seur, ref_celldata_col = \"SFClassification\", selected_features = vg, return_type = \"matrix\", backend = backend)  # Convert labels to max class and save them train_label <- apply(ti$Ytrain_label, 1, which.max) test_label <- apply(ti$Ytest_label, 1, which.max)  # Save training data and labels writeMMgz(as(ti$Xtrain_data, \"dgCMatrix\"), \"/path/to/train.mm.gz\") writeMMgz(as(ti$Xtest_data, \"dgCMatrix\"), \"/path/to/test.mm.gz\") writeMMgz(as(ti$query, \"dgCMatrix\"), \"/path/to/query.mm.gz\") data.table::fwrite(data.frame(train = train_label), \"/path/to/train_labels.tsv.gz\", compress = \"gzip\") data.table::fwrite(data.frame(test = test_label), \"/path/to/test_labels.tsv.gz\", compress = \"gzip\")"},{"path":"https://furlan-lab.github.io/viewmastR/articles/InDepth.html","id":"analyzing-probabilities","dir":"Articles","previous_headings":"A Deeper Look at viewmastR","what":"6. Analyzing Probabilities","title":"A deeper look at viewmastR","text":"Run inference obtain prediction probabilities:","code":"training_output <- viewmastR(ref_cds = seur, ref_celldata_col = \"SFClassification\", selected_features = vg, max_epochs = 3, train_only = T)  # Obtain prediction probabilities seu <- viewmastR_infer(seu, model_dir = training_output[[\"model_dir\"]], selected_features = vg, labels = levels(factor(seur$SFClassification)), return_probs = TRUE) scCustomize::FeaturePlot_scCustom(seu, features = \"prob_19_CD8.EM\")"},{"path":"https://furlan-lab.github.io/viewmastR/articles/InDepth.html","id":"evaluating-model-weights","dir":"Articles","previous_headings":"A Deeper Look at viewmastR","what":"7. Evaluating Model Weights","title":"A deeper look at viewmastR","text":"inspect model weights (note works mlr - see ):","code":"dir <- \"/tmp/sc_local\" wmat <- get_weights(dir) top_NK_genes <- rownames(wmat)[sort(wmat$'21_NK', index.return=T, decreasing=T)$ix[1:20]] seu <-AddModuleScore(seu, features = list(top_nk_genes=top_NK_genes)) FeaturePlot_scCustom(seu, features = \"Cluster1\")"},{"path":"https://furlan-lab.github.io/viewmastR/articles/InDepth.html","id":"comparing-different-algorithms","dir":"Articles","previous_headings":"A Deeper Look at viewmastR","what":"8. Comparing Different Algorithms","title":"A deeper look at viewmastR","text":"viewmastR supports various algorithms, pseudo multinomial logistic regression (mlr), multinomial naive bayes (nb), multi-layer perceptron (nn). can read similarity simple neural network logistic regression (https://medium.com/@axegggl/neural-networks-decoded--logistic-regression---hidden-first-step-495f4a0b5fd#:~:text=%20you%20think%20about%20a,like%20a%20logistic%20regression%20model.) code shows can run compare methods:","code":"seu <- viewmastR(seu, seur, ref_celldata_col = \"SFClassification\", FUNC = \"mlr\", query_celldata_col = \"mlr_pred\", selected_features = vg, max_epochs = 3) seu <- viewmastR(seu, seur, ref_celldata_col = \"SFClassification\", FUNC = \"nb\", query_celldata_col = \"nb_pred\", selected_features = vg) seu <- viewmastR(seu, seur, ref_celldata_col = \"SFClassification\", FUNC = \"nn\", query_celldata_col = \"nn_pred\", selected_genes = vg, hidden_layers = c(200), max_epochs = 3) seu <- viewmastR(seu, seur, ref_celldata_col = \"SFClassification\", FUNC = \"nn\", query_celldata_col = \"nn2_pred\", selected_genes = vg, hidden_layers = c(1000, 150), max_epochs = 3)   # Visualize predictions DimPlot(seu, group.by = \"mlr_pred\") DimPlot(seu, group.by = \"nb_pred\") DimPlot(seu, group.by = \"nn_pred\") DimPlot(seu, group.by = \"nn2_pred\") # Evaluate accuracy accuracy_mlr <- length(which(seu$mlr_pred == seu$ground_truth)) / dim(seu)[2] accuracy_nb <- length(which(seu$nb_pred == seu$ground_truth)) / dim(seu)[2] accuracy_nn <- length(which(seu$nn_pred == seu$ground_truth)) / dim(seu)[2] accuracy_nn2 <- length(which(seu$nn2_pred == seu$ground_truth)) / dim(seu)[2]  # Compare accuracies gp<-ggplot(data.frame(accuracy = c(accuracy_mlr, accuracy_nb, accuracy_nn, accuracy_nn2)*100,                    algorithm = c(\"mlr\", \"nb\", \"nn\",\"nn2\")),        aes(x = algorithm, y = accuracy, fill = algorithm)) +    geom_col() +    theme_bw() +    labs(x = \"Algorithm\", y = \"Accuracy (%)\") +    NoLegend() ggplotly(gp)"},{"path":"https://furlan-lab.github.io/viewmastR/articles/SavedModel.html","id":"installing-rust","dir":"Articles","previous_headings":"","what":"Installing Rust","title":"How to use viewmastR with saved models","text":"First need updated Rust installation. Go site learn install Rust.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/articles/SavedModel.html","id":"installing-viewmastr","dir":"Articles","previous_headings":"","what":"Installing viewmastR","title":"How to use viewmastR with saved models","text":"need devtools package installed…","code":"devtools::install_github(\"furlan-lab/viewmastR\")"},{"path":"https://furlan-lab.github.io/viewmastR/articles/SavedModel.html","id":"running-viewmastr","dir":"Articles","previous_headings":"","what":"Running viewmastR","title":"How to use viewmastR with saved models","text":"","code":"suppressPackageStartupMessages({ library(viewmastR) library(Seurat) library(ggplot2) })  #query dataset seu <- readRDS(file.path(ROOT_DIR1, \"240813_final_object.RDS\")) #reference dataset seur<-readRDS(file.path(ROOT_DIR2, \"230329_rnaAugmented_seurat.RDS\")) vg <- get_selected_features(seu)"},{"path":"https://furlan-lab.github.io/viewmastR/articles/SavedModel.html","id":"now-you-run-viewmastr","dir":"Articles","previous_headings":"","what":"Now you run viewmastR","title":"How to use viewmastR with saved models","text":"model path specified using ‘dir’ argument","code":"seu<-viewmastR(seu, seur, ref_celldata_col = \"SFClassification\", selected_features = vg, dir = \"/tmp/sc_local\", max_epochs = 3)"},{"path":"https://furlan-lab.github.io/viewmastR/articles/SavedModel.html","id":"a-look-at-the-predictions","dir":"Articles","previous_headings":"","what":"A look at the predictions","title":"How to use viewmastR with saved models","text":"","code":"DimPlot(seu, group.by = \"viewmastR_pred\", cols = seur@misc$colors)"},{"path":"https://furlan-lab.github.io/viewmastR/articles/SavedModel.html","id":"run-inference","dir":"Articles","previous_headings":"","what":"Run inference","title":"How to use viewmastR with saved models","text":"can use function viewmastR_infer run inference saved model. need pass vector variable features used initially create model. can use query_celldata_col specify name metadata column returned object. optional vector labels can provided. Additionally, instead returning input object predictions added, may instead return probabilities using return_probs argument.","code":"seu<-viewmastR_infer(seu, model_dir = \"/tmp/sc_local\", vg, labels = levels(factor(seur$SFClassification))) DimPlot(seu, group.by = \"viewmastR_inferred\", cols = seur@misc$colors)"},{"path":"https://furlan-lab.github.io/viewmastR/articles/SavedModel.html","id":"a-confusion-matrix-comparing-the-results-using-viewmastr-to-viewmastr_infer-having-saved-the-model-to-disc-","dir":"Articles","previous_headings":"","what":"A confusion matrix comparing the results using viewmastR to viewmastR_infer having saved the model to disc.","title":"How to use viewmastR with saved models","text":"Open question small number cells different :)","code":"confusion_matrix(pred = factor(seu$viewmastR_inferred), gt = factor(seu$viewmastR_pred), cols = seur@misc$colors)"},{"path":"https://furlan-lab.github.io/viewmastR/articles/SavedModel.html","id":"appendix","dir":"Articles","previous_headings":"","what":"Appendix","title":"How to use viewmastR with saved models","text":"","code":"sessionInfo() ## R version 4.4.3 (2025-02-28) ## Platform: aarch64-apple-darwin20 ## Running under: macOS Sequoia 15.4.1 ##  ## Matrix products: default ## BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib  ## LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0 ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## time zone: America/Los_Angeles ## tzcode source: internal ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] ggplot2_3.5.2      Seurat_5.2.1       SeuratObject_5.0.2 sp_2.2-0           ## [5] viewmastR_0.3.0    ##  ## loaded via a namespace (and not attached): ##   [1] fs_1.6.5                    matrixStats_1.5.0           ##   [3] spatstat.sparse_3.1-0       RcppMsgPack_0.2.4           ##   [5] lubridate_1.9.4             httr_1.4.7                  ##   [7] RColorBrewer_1.1-3          doParallel_1.0.17           ##   [9] tools_4.4.3                 sctransform_0.4.1           ##  [11] backports_1.5.0             R6_2.6.1                    ##  [13] lazyeval_0.2.2              uwot_0.2.3                  ##  [15] GetoptLong_1.0.5            withr_3.0.2                 ##  [17] gridExtra_2.3               scCustomize_3.0.1           ##  [19] progressr_0.15.1            cli_3.6.4                   ##  [21] Biobase_2.66.0              textshaping_1.0.0           ##  [23] Cairo_1.6-2                 spatstat.explore_3.4-2      ##  [25] fastDummies_1.7.5           labeling_0.4.3              ##  [27] sass_0.4.9                  spatstat.data_3.1-6         ##  [29] proxy_0.4-27                ggridges_0.5.6              ##  [31] pbapply_1.7-2               pkgdown_2.1.1               ##  [33] systemfonts_1.2.2           foreign_0.8-90              ##  [35] R.utils_2.13.0              parallelly_1.43.0           ##  [37] rstudioapi_0.17.1           generics_0.1.3              ##  [39] shape_1.4.6.1               ica_1.0-3                   ##  [41] spatstat.random_3.3-3       dplyr_1.1.4                 ##  [43] Matrix_1.7-3                ggbeeswarm_0.7.2            ##  [45] S4Vectors_0.44.0            abind_1.4-8                 ##  [47] R.methodsS3_1.8.2           lifecycle_1.0.4             ##  [49] yaml_2.3.10                 snakecase_0.11.1            ##  [51] SummarizedExperiment_1.36.0 recipes_1.2.1               ##  [53] SparseArray_1.6.2           Rtsne_0.17                  ##  [55] paletteer_1.6.0             grid_4.4.3                  ##  [57] promises_1.3.2              crayon_1.5.3                ##  [59] miniUI_0.1.1.1              lattice_0.22-7              ##  [61] cowplot_1.1.3               pillar_1.10.2               ##  [63] knitr_1.50                  ComplexHeatmap_2.22.0       ##  [65] GenomicRanges_1.58.0        rjson_0.2.23                ##  [67] boot_1.3-31                 future.apply_1.11.3         ##  [69] codetools_0.2-20            glue_1.8.0                  ##  [71] spatstat.univar_3.1-2       data.table_1.17.0           ##  [73] vctrs_0.6.5                 png_0.1-8                   ##  [75] spam_2.11-1                 Rdpack_2.6.4                ##  [77] gtable_0.3.6                rematch2_2.1.2              ##  [79] assertthat_0.2.1            cachem_1.1.0                ##  [81] gower_1.0.2                 xfun_0.52                   ##  [83] rbibutils_2.3               S4Arrays_1.6.0              ##  [85] mime_0.13                   prodlim_2025.04.28          ##  [87] reformulas_0.4.0            survival_3.8-3              ##  [89] timeDate_4041.110           SingleCellExperiment_1.28.1 ##  [91] iterators_1.0.14            pbmcapply_1.5.1             ##  [93] hardhat_1.4.1               lava_1.8.1                  ##  [95] fitdistrplus_1.2-2          ROCR_1.0-11                 ##  [97] ipred_0.9-15                nlme_3.1-168                ##  [99] RcppAnnoy_0.0.22            GenomeInfoDb_1.42.3         ## [101] bslib_0.9.0                 irlba_2.3.5.1               ## [103] vipor_0.4.7                 KernSmooth_2.23-26          ## [105] rpart_4.1.24                colorspace_2.1-1            ## [107] BiocGenerics_0.52.0         Hmisc_5.2-3                 ## [109] nnet_7.3-20                 ggrastr_1.0.2               ## [111] tidyselect_1.2.1            compiler_4.4.3              ## [113] htmlTable_2.4.3             desc_1.4.3                  ## [115] DelayedArray_0.32.0         plotly_4.10.4               ## [117] checkmate_2.3.2             scales_1.3.0                ## [119] lmtest_0.9-40               stringr_1.5.1               ## [121] digest_0.6.37               goftest_1.2-3               ## [123] spatstat.utils_3.1-3        minqa_1.2.8                 ## [125] rmarkdown_2.29              XVector_0.46.0              ## [127] htmltools_0.5.8.1           pkgconfig_2.0.3             ## [129] base64enc_0.1-3             lme4_1.1-37                 ## [131] sparseMatrixStats_1.18.0    MatrixGenerics_1.18.1       ## [133] fastmap_1.2.0               rlang_1.1.6                 ## [135] GlobalOptions_0.1.2         htmlwidgets_1.6.4           ## [137] UCSC.utils_1.2.0            shiny_1.10.0                ## [139] DelayedMatrixStats_1.28.1   farver_2.1.2                ## [141] jquerylib_0.1.4             zoo_1.8-14                  ## [143] jsonlite_2.0.0              ModelMetrics_1.2.2.2        ## [145] R.oo_1.27.0                 magrittr_2.0.3              ## [147] Formula_1.2-5               GenomeInfoDbData_1.2.13     ## [149] dotCall64_1.2               patchwork_1.3.0             ## [151] munsell_0.5.1               Rcpp_1.0.14                 ## [153] reticulate_1.42.0           stringi_1.8.7               ## [155] pROC_1.18.5                 zlibbioc_1.52.0             ## [157] MASS_7.3-65                 plyr_1.8.9                  ## [159] parallel_4.4.3              listenv_0.9.1               ## [161] ggrepel_0.9.6               forcats_1.0.0               ## [163] deldir_2.0-4                splines_4.4.3               ## [165] tensor_1.5                  circlize_0.4.16             ## [167] igraph_2.1.4                spatstat.geom_3.3-6         ## [169] RcppHNSW_0.6.0              reshape2_1.4.4              ## [171] stats4_4.4.3                evaluate_1.0.3              ## [173] ggprism_1.0.5               nloptr_2.2.1                ## [175] foreach_1.5.2               httpuv_1.6.15               ## [177] RANN_2.6.2                  tidyr_1.3.1                 ## [179] purrr_1.0.4                 polyclip_1.10-7             ## [181] future_1.40.0               clue_0.3-66                 ## [183] scattermore_1.2             janitor_2.2.1               ## [185] xtable_1.8-4                monocle3_1.3.7              ## [187] e1071_1.7-16                RSpectra_0.16-2             ## [189] later_1.4.2                 viridisLite_0.4.2           ## [191] class_7.3-23                ragg_1.4.0                  ## [193] tibble_3.2.1                beeswarm_0.4.0              ## [195] IRanges_2.40.1              cluster_2.1.8.1             ## [197] timechange_0.3.0            globals_0.16.3              ## [199] caret_7.0-1 getwd() ## [1] \"/Users/sfurlan/develop/viewmastR/vignettes\""},{"path":"https://furlan-lab.github.io/viewmastR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Scott Furlan. Author, maintainer.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Furlan S (2025). viewmastR: Automated single-cell genomic cell type assignment. R package version 0.3.0, https://furlan-lab.github.io/viewmastR/.","code":"@Manual{,   title = {viewmastR: Automated single-cell genomic cell type assignment},   author = {Scott Furlan},   year = {2025},   note = {R package version 0.3.0},   url = {https://furlan-lab.github.io/viewmastR/}, }"},{"path":"https://furlan-lab.github.io/viewmastR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Automated single-cell genomic cell type assignment","text":"First need updated Rust installation. Go site learn install Rust. install development version viewmastR:","code":"remotes::install_github(\"furlan-lab/viewmastR\")"},{"path":"https://furlan-lab.github.io/viewmastR/index.html","id":"how-to-start","dir":"","previous_headings":"","what":"How to start","title":"Automated single-cell genomic cell type assignment","text":"vignettes vignette(\"HowTo\") explore basics package. vignette(\"Augment\") explore data augmentation vignette(\"BulkClassify\") see use bulk dataset classify single-cell profiles","code":""},{"path":"https://furlan-lab.github.io/viewmastR/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Automated single-cell genomic cell type assignment","text":"viewmastR dependency Burn, open source Rust machine learning library. viewmastR written MIT license.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Automated single-cell genomic cell type assignment","text":"Written Scott Furlan.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/augment_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Augment data — augment_data","title":"Augment data — augment_data","text":"function takes seurat object finds cells sufficiently abundant grouped column parameter, simulates data augment cell number level parameter - norm_number","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/augment_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Augment data — augment_data","text":"","code":"augment_data(obj, column, norm_number = 2000, assay = \"RNA\", prune = F)"},{"path":"https://furlan-lab.github.io/viewmastR/reference/augment_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Augment data — augment_data","text":"column column metadata designates cell group (.e. celltype) norm_number cell number augment data cells sufficiently abundant object prune downsample cells present number higher norm_number level norm_number (default = F)","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/augment_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Augment data — augment_data","text":"seurat object augmented simulated cells cell groups present level norm_number cells","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/calculate_gene_dispersion.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate dispersion genes in a cell_data_set object — calculate_gene_dispersion","title":"Calculate dispersion genes in a cell_data_set object — calculate_gene_dispersion","text":"Monocle3 aims learn cells transition biological program gene expression changes experiment. cell can viewed point high-dimensional space, dimension describes expression different gene. Identifying program gene expression changes equivalent learning trajectory cells follow space. However, dimensions analysis, harder trajectory learn. Fortunately, many genes typically co-vary one another, dimensionality data can reduced wide variety different algorithms. Monocle3 provides two different algorithms dimensionality reduction via reduce_dimensions (UMAP tSNE). function calculate_dispersion optional step trajectory building process preprocess_cds.  calculating dispersion cell_data_set using calculate_gene_dispersion function, select_features function allows user identify set genes used downstream dimensionality reduction methods.  genes disperion mean expression can plotted using plot_gene_dispersion function. function calculates dispersion genes cell_data_set object downstream analysis.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/calculate_gene_dispersion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate dispersion genes in a cell_data_set object — calculate_gene_dispersion","text":"","code":"calculate_gene_dispersion(   cds,   q = 3,   id_tag = \"id\",   symbol_tag = \"gene_short_name\",   method = \"m3addon\",   removeOutliers = T )  calculate_gene_dispersion(   cds,   q = 3,   id_tag = \"id\",   symbol_tag = \"gene_short_name\",   method = \"m3addon\",   removeOutliers = T )"},{"path":"https://furlan-lab.github.io/viewmastR/reference/calculate_gene_dispersion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate dispersion genes in a cell_data_set object — calculate_gene_dispersion","text":"cds cell data set upon perform operation. q polynomial degree. id_tag name feature data column corresponding unique id. symbol_tag name feature data column corresponding gene symbol. upper_lim upper limit dispersion consider. verbose Boolean indicating whether display verbose output.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/calculate_gene_dispersion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate dispersion genes in a cell_data_set object — calculate_gene_dispersion","text":"updated cell_data_set object dispersion mean expression saved vector dispersion genes.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/common_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Finds common features in a list of single cell objects — common_features","title":"Finds common features in a list of single cell objects — common_features","text":"Machine learning algorithms often require features across datasets.  function finds common features list cell data set objects (monocle3) returns list cds's features.  Note function uses rownames 'fData' DataFrame (monocle3) rownames seurat_object find intersect features common objects Machine learning algorithms often require features across datasets.  function finds common features list cell data set objects (monocle3) returns list cds's features.  Note function uses rownames 'fData' DataFrame (monocle3) rownames seurat_object find intersect features common objects","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/common_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finds common features in a list of single cell objects — common_features","text":"","code":"common_features(cds_list)  common_features(cds_list)"},{"path":"https://furlan-lab.github.io/viewmastR/reference/common_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finds common features in a list of single cell objects — common_features","text":"cds_list Input  object.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/common_variant_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Common Variant Genes — common_variant_genes","title":"Common Variant Genes — common_variant_genes","text":"function finds common variant genes two cell data sets.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/common_variant_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Common Variant Genes — common_variant_genes","text":"","code":"common_variant_genes(   cds1,   cds2,   top_n = 2000,   logmean_ul = 2,   logmean_ll = -6,   row_data_column = \"gene_short_name\",   unique_data_column = \"id\",   verbose = T,   plot = F )"},{"path":"https://furlan-lab.github.io/viewmastR/reference/common_variant_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Common Variant Genes — common_variant_genes","text":"cds1 first cell data set. cds2 second cell data set. top_n number top genes consider. Default 2000. logmean_ul upper limit mean expression. logmean_ll lower limit mean expression. row_data_column column feature data corresponding gene symbol. unique_data_column column feature data corresponding unique id. verbose Boolean indicating whether display verbose output. plot Boolean indicating whether plot results.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/common_variant_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Common Variant Genes — common_variant_genes","text":"vector similarly variant genes.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/computeSparseRowVariances.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute sparse row variance — computeSparseRowVariances","title":"Compute sparse row variance — computeSparseRowVariances","text":"Compute sparse row variance","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/computeSparseRowVariances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute sparse row variance — computeSparseRowVariances","text":"","code":"computeSparseRowVariances(j, val, rm, n)"},{"path":"https://furlan-lab.github.io/viewmastR/reference/confusion_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Confusion matrix — confusion_matrix","title":"Confusion matrix — confusion_matrix","text":"function generate confusion matrix two factors; pred (short prediction) gt (short ground truth).  One may optionally supply named vector colors annotate row column legends.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/confusion_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confusion matrix — confusion_matrix","text":"","code":"confusion_matrix(pred, gt, cols = NULL)"},{"path":"https://furlan-lab.github.io/viewmastR/reference/confusion_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confusion matrix — confusion_matrix","text":"pred factor predictions gt factor ground truth cols named vector colors","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/confusion_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confusion matrix — confusion_matrix","text":"confusion matrix plot","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/detect_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Detects genes above minimum threshold. — detect_genes","title":"Detects genes above minimum threshold. — detect_genes","text":"gene cell_data_set object, detect_genes counts many cells expressed minimum threshold. addition, cell, detect_genes counts number genes threshold detectable. Results added columns num_cells_expressed num_genes_expressed rowData colData tables respectively.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/detect_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detects genes above minimum threshold. — detect_genes","text":"","code":"detect_genes(cds, min_expr = 0, exprs_bin = TRUE, exprs_cuts = 25)"},{"path":"https://furlan-lab.github.io/viewmastR/reference/detect_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detects genes above minimum threshold. — detect_genes","text":"cds Input cell_data_set object. min_expr Numeric indicating expression threshold exprs_bin Boolean whether bin genes mean expression exprs_cuts Numeic indicating number bins using exprs_bin","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/detect_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detects genes above minimum threshold. — detect_genes","text":"Updated cell_data_set object","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/extract_mpk_shapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the Shape of Every Tensor in a burn .mpk Checkpoint — extract_mpk_shapes","title":"Extract the Shape of Every Tensor in a burn .mpk Checkpoint — extract_mpk_shapes","text":"Walks arbitrary-depth module tree inside burn‐generated MessagePack checkpoint (*.mpk) returns tidy data frame listing tensor (e.g., weight, bias) dimensions.  Handles number linear () layers preserves nested sub-module names via dot-separated path.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/extract_mpk_shapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the Shape of Every Tensor in a burn .mpk Checkpoint — extract_mpk_shapes","text":"","code":"extract_mpk_shapes(file)"},{"path":"https://furlan-lab.github.io/viewmastR/reference/extract_mpk_shapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the Shape of Every Tensor in a burn .mpk Checkpoint — extract_mpk_shapes","text":"file name model.mpk file","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/get_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract linear-layer weights and map them to feature / class names — get_weights","title":"Extract linear-layer weights and map them to feature / class names — get_weights","text":"Reads model exported Rust Burn pipeline together companion metadata file returns tidy weight matrix whose rows correspond original feature names whose columns correspond class labels.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/get_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract linear-layer weights and map them to feature / class names — get_weights","text":"","code":"get_weights(dir)"},{"path":"https://furlan-lab.github.io/viewmastR/reference/get_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract linear-layer weights and map them to feature / class names — get_weights","text":"dir character(1)  Path artefact directory contains files produced run_custom(): model.mpk  – tensor weights saved via NamedMpkFileRecorder::<FullPrecisionSettings> meta.mpk   – MessagePack blob created save_artifacts() holding feature_names class_labels.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/get_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract linear-layer weights and map them to feature / class names — get_weights","text":"base-data.frame dimension \\((\\#\\;features) \\times (\\#\\;classes)\\), rownames(wmat) feature names colnames(wmat) class labels.  Cell (,j) weight connecting feature logit j.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/get_weights.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract linear-layer weights and map them to feature / class names — get_weights","text":"Internally function: deserialises two MessagePack files msgpackR; raw‐decodes tensor bytes decode_param(); reshapes flat vector column-major matrix using stored shape ([out_dim, in_dim]); transposes rows align features; re-labels rows columns metadata lists. resulting object ready pheatmap(), corrplot(), .matrix() analysis.","code":""},{"path":[]},{"path":"https://furlan-lab.github.io/viewmastR/reference/get_weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract linear-layer weights and map them to feature / class names — get_weights","text":"","code":"if (FALSE) { # \\dontrun{ w <- get_weights(\"artifacts/run-42\") head(w[, 1:5])         # first 5 classes  # visualise top positive / negative features for class 3 cls <- 3 w_sorted <- w[order(w[, cls]), cls] barplot(tail(w_sorted, 10), horiz = TRUE, las = 1) barplot(head(w_sorted, 10), horiz = TRUE, las = 1) } # }"},{"path":"https://furlan-lab.github.io/viewmastR/reference/make3file.html","id":null,"dir":"Reference","previous_headings":"","what":"Export a Seurat Object to 10X-Style Files — make3file","title":"Export a Seurat Object to 10X-Style Files — make3file","text":"Write counts matrix, features, barcodes, metadata, variable features —optionally—reduction embeddings Seurat object 10X “3-file” layout.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/make3file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export a Seurat Object to 10X-Style Files — make3file","text":"","code":"make3file(seu, assay = \"RNA\", dir, get_reductions = TRUE)"},{"path":"https://furlan-lab.github.io/viewmastR/reference/make3file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export a Seurat Object to 10X-Style Files — make3file","text":"seu Seurat object. assay assay export (default \"RNA\"). dir Output directory (must already exist). get_reductions Logical; also export reduction embeddings (default TRUE).","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/make3file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export a Seurat Object to 10X-Style Files — make3file","text":"Invisibly returns NULL; called side effects.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/make3file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Export a Seurat Object to 10X-Style Files — make3file","text":"function creates sub-directory called 3file inside dir writes: matrix.mtx.gzCompressed Matrix Market file containing counts matrix. features.tsv.gzGene (feature) table. barcodes.tsv.gzCell barcodes. meta.csvCell-level metadata. \\<reduction\\>_reduction.tsv.gzEmbeddings reduction (UMAP, PCA, …); written get_reductions = TRUE. variablefeatures.tsv.gzVariable-gene list.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/make3file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export a Seurat Object to 10X-Style Files — make3file","text":"","code":"if (FALSE) { # \\dontrun{ make3file(seu, assay = \"RNA\", dir = \"out\", get_reductions = FALSE) } # }"},{"path":"https://furlan-lab.github.io/viewmastR/reference/plot_training_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Training data plot — plot_training_data","title":"Training data plot — plot_training_data","text":"function display plot data generated viewmastR training","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/plot_training_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Training data plot — plot_training_data","text":"","code":"plot_training_data(output_list)"},{"path":"https://furlan-lab.github.io/viewmastR/reference/plot_training_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Training data plot — plot_training_data","text":"output_list list returned running viewmastR using return_type = \"list\" parameter.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/plot_training_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Training data plot — plot_training_data","text":"plot training data","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/process_learning_obj.html","id":null,"dir":"Reference","previous_headings":"","what":"A single entry-point that covers MLR and ANN/ANN-2L. — process_learning_obj","title":"A single entry-point that covers MLR and ANN/ANN-2L. — process_learning_obj","text":"model_type – \"mlr\", \"ann\", \"ann2\" (can choose tokens like) hidden_size – NULL MLR; numeric (len 1 2) ANN.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/process_learning_obj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A single entry-point that covers MLR and ANN/ANN-2L. — process_learning_obj","text":"","code":"process_learning_obj(   model_type,   train,   test,   query,   labels,   feature_names,   hidden_size,   learning_rate,   num_epochs,   directory,   verbose,   backend )"},{"path":"https://furlan-lab.github.io/viewmastR/reference/process_learning_obj_nb.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Robj learning objects for MLR — process_learning_obj_nb","title":"Process Robj learning objects for MLR — process_learning_obj_nb","text":"Process Robj learning objects MLR","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/process_learning_obj_nb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Robj learning objects for MLR — process_learning_obj_nb","text":"","code":"process_learning_obj_nb(train, test, query)"},{"path":"https://furlan-lab.github.io/viewmastR/reference/readR.html","id":null,"dir":"Reference","previous_headings":"","what":"Read an R object — readR","title":"Read an R object — readR","text":"Read R object","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/readR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read an R object — readR","text":"","code":"readR(obj)"},{"path":"https://furlan-lab.github.io/viewmastR/reference/select_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Select genes in a cell_data_set for dimensionality reduction — select_features","title":"Select genes in a cell_data_set for dimensionality reduction — select_features","text":"Monocle3 aims learn cells transition biological program gene expression changes experiment. cell can viewed point high-dimensional space, dimension describes expression different gene. Identifying program gene expression changes equivalent learning trajectory cells follow space. However, dimensions analysis, harder trajectory learn. Fortunately, many genes typically co-vary one another, dimensionality data can reduced wide variety different algorithms. Monocle3 provides two different algorithms dimensionality reduction via reduce_dimensions (UMAP tSNE). function select_features optional step trajectory building process preprocess_cds.  calculating dispersion cell_data_set using calculate_gene_dispersion function, select_features function allows user identify set genes used downstream dimensionality reduction methods.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/select_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select genes in a cell_data_set for dimensionality reduction — select_features","text":"","code":"select_features(   cds,   fit_min = 1,   fit_max = Inf,   logmean_ul = Inf,   logmean_ll = -Inf,   top_n = NULL )"},{"path":"https://furlan-lab.github.io/viewmastR/reference/select_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select genes in a cell_data_set for dimensionality reduction — select_features","text":"cds cell_data_set upon perform operation. fit_min minimum multiple dispersion fit calculation; default = 1 fit_max maximum multiple dispersion fit calculation; default = Inf logmean_ul maximum multiple dispersion fit calculation; default = Inf logmean_ll maximum multiple dispersion fit calculation; default = Inf top top_n specified, override fit_min fit_max select top n variant features.  logmena_ul logmean_ll can still used.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/select_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select genes in a cell_data_set for dimensionality reduction — select_features","text":"updated cell_data_set object selected features","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/setup_training.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up training, testing, and optional query datasets for model training — setup_training","title":"Set up training, testing, and optional query datasets for model training — setup_training","text":"function prepares normalized optionally scaled data matrices reference (optionally) query datasets. query_cds provided, identifies common features reference query datasets, normalizes , optionally performs TF-IDF scaling, returns training/test splits reference query dataset. query_cds provided, function behaves like reference-setup, returning just training testing splits.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/setup_training.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up training, testing, and optional query datasets for model training — setup_training","text":"","code":"setup_training(   query_cds = NULL,   ref_cds,   ref_celldata_col,   norm_method = c(\"log\", \"binary\", \"size_only\", \"none\"),   selected_features = NULL,   train_frac = 0.8,   tf_idf = FALSE,   scale = FALSE,   LSImethod = 1,   verbose = TRUE,   addbias = FALSE,   return_type = c(\"list\", \"matrix\", \"S4obj\"),   debug = FALSE,   ... )"},{"path":"https://furlan-lab.github.io/viewmastR/reference/setup_training.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up training, testing, and optional query datasets for model training — setup_training","text":"query_cds Seurat cell_data_set object representing query dataset. NULL, query data processed. ref_cds Seurat cell_data_set object representing reference dataset. ref_celldata_col character string indicating metadata column ref_cds use labels. norm_method character string specifying normalization method use. One \"log\", \"binary\", \"size_only\", \"none\". selected_features character vector gene names subset. NULL, uses common features (query provided) selected features (reference provided). train_frac numeric value 0 1 indicating fraction reference cells use training. rest used testing. tf_idf logical indicating whether perform TF-IDF normalization count matrices. scale logical indicating whether scale data. TRUE tf_idf = TRUE, TF-IDF takes precedence scaling ignored. LSImethod integer specifying TF-IDF method variant use (passed tf_idf_transform). verbose logical indicating whether print progress messages. addbias logical indicating whether add bias row (ones) data matrices. return_type character string specifying return format. One \"list\", \"matrix\", \"S4obj\". debug logical indicating whether print debugging messages. ... Additional arguments passed internal functions.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/setup_training.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up training, testing, and optional query datasets for model training — setup_training","text":"list containing either matrices, lists data items, S4 objects, depending return_type.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/setup_training.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set up training, testing, and optional query datasets for model training — setup_training","text":"function handles two scenarios: query_cds provided, extracts common features ref_cds query_cds, normalizes datasets, performs optional TF-IDF scaling, returns training/testing splits reference along query dataset. query_cds NULL, behaves like reference-setup, returning just training testing splits ref_cds. returned object depends return_type: \"matrix\": list matrices containing Xtrain_data, Xtest_data, Ytrain_label, Ytest_label, optionally query, well label_text features. \"list\": list lists, cell represented list data target elements. \"S4obj\": list S4 objects training_set, test_set, optionally query_set, containing training items metadata.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/setup_training.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up training, testing, and optional query datasets for model training — setup_training","text":"","code":"if (FALSE) { # \\dontrun{ # Example with both reference and query data: result <- setup_training(   query_cds = query_seurat_obj,   ref_cds = ref_seurat_obj,   ref_celldata_col = \"cell_type\",   norm_method = \"log\",   train_frac = 0.8,   tf_idf = TRUE,   scale = FALSE,   return_type = \"list\" )  # Example with reference only: result_ref <- setup_training(   query_cds = NULL,   ref_cds = ref_cds_obj,   ref_celldata_col = \"cell_type\",   norm_method = \"none\",   train_frac = 0.7,   scale = TRUE,   return_type = \"matrix\" ) } # }"},{"path":"https://furlan-lab.github.io/viewmastR/reference/sparseRowVariances.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for summing sparse matrix groups — sparseRowVariances","title":"Helper function for summing sparse matrix groups — sparseRowVariances","text":"Helper function summing sparse matrix groups","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/sparseRowVariances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for summing sparse matrix groups — sparseRowVariances","text":"","code":"sparseRowVariances(m)"},{"path":"https://furlan-lab.github.io/viewmastR/reference/sparseRowVariances.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Helper function for summing sparse matrix groups — sparseRowVariances","text":"Granja, J. M.et al. (2019). Single-cell multiomic analysis identifies regulatory programs mixed-phenotype acute leukemia. Nature Biotechnology, 37(12), 1458–1465.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/splat_bulk_reference.html","id":null,"dir":"Reference","previous_headings":"","what":"Bulk reference — splat_bulk_reference","title":"Bulk reference — splat_bulk_reference","text":"function creates seurat object (typically single cell genomics) multiple single cell profiles sample bulk object (SummarizedExperiment object currently supported).  , function creates single cell profiles size distribution approximates provided single cell object (query)","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/splat_bulk_reference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bulk reference — splat_bulk_reference","text":"","code":"splat_bulk_reference(   query = NULL,   ref,   N = 2,   assay = \"RNA\",   bulk_feature_row = \"gene_short_name\",   bulk_assay_name = \"counts\",   dist = c(\"sc-direct\", \"sc-mimic\", \"bulk\") )"},{"path":"https://furlan-lab.github.io/viewmastR/reference/splat_bulk_reference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bulk reference — splat_bulk_reference","text":"query single cell object (Seurat) size distribution counts mimicked assay argument ref reference object (Summarized Experiment) assay assay slot query (Seurat) bulk_feature_row column name gene symbols ref bulk_assay_name name assay object ref dist DEVELOPMENT","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/splat_bulk_reference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bulk reference — splat_bulk_reference","text":"classified seurat object labeled according bulk reference","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/tf_idf_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs TF-IDF transformation on a cell_data_set — tf_idf_transform","title":"Performs TF-IDF transformation on a cell_data_set — tf_idf_transform","text":"Just like sounds.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/tf_idf_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs TF-IDF transformation on a cell_data_set — tf_idf_transform","text":"","code":"tf_idf_transform(input, method = 1, verbose = T)"},{"path":"https://furlan-lab.github.io/viewmastR/reference/tf_idf_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs TF-IDF transformation on a cell_data_set — tf_idf_transform","text":"cds_list Input cell_data_set object sparse matrix.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/tf_idf_transform_v2.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs TF-IDF transformation on a cell_data_set v2 — tf_idf_transform_v2","title":"Performs TF-IDF transformation on a cell_data_set v2 — tf_idf_transform_v2","text":"Just like sounds different.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/tf_idf_transform_v2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs TF-IDF transformation on a cell_data_set v2 — tf_idf_transform_v2","text":"","code":"tf_idf_transform_v2(input)"},{"path":"https://furlan-lab.github.io/viewmastR/reference/tf_idf_transform_v2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs TF-IDF transformation on a cell_data_set v2 — tf_idf_transform_v2","text":"cds_list Input cell_data_set object sparse matrix.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/viewmastR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"viewmastR: Automated single-cell genomic cell type assignment — viewmastR-package","title":"viewmastR: Automated single-cell genomic cell type assignment — viewmastR-package","text":"viewmastR uses machine learning implemented Rust perform automated cell type classification single-cell genomic data. Currently viewmastR authored work scRNAseq data, features coming.","code":""},{"path":[]},{"path":"https://furlan-lab.github.io/viewmastR/reference/viewmastR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"viewmastR: Automated single-cell genomic cell type assignment — viewmastR-package","text":"Maintainer: Scott Furlan scottfurlan@gmail.com (ORCID)","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/viewmastR.html","id":null,"dir":"Reference","previous_headings":"","what":"Integrate and Train Models on Reference Dataset and (Optionally) Infer on Query Datasets — viewmastR","title":"Integrate and Train Models on Reference Dataset and (Optionally) Infer on Query Datasets — viewmastR","text":"viewmastR function preprocesses one two single-cell datasets (reference optional query), splits reference data training test sets, optionally includes ability run inference query dataset downstream analysis. applies specified modeling functions (e.g., MLR, NN, NB) train optionally predict query data.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/viewmastR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integrate and Train Models on Reference Dataset and (Optionally) Infer on Query Datasets — viewmastR","text":"","code":"viewmastR(   query_cds,   ref_cds,   ref_celldata_col,   query_celldata_col = NULL,   FUNC = c(\"mlr\", \"nn\", \"nb\"),   norm_method = c(\"log\", \"binary\", \"size_only\", \"none\"),   selected_features = NULL,   train_frac = 0.8,   tf_idf = FALSE,   scale = FALSE,   hidden_layers = c(as.integer(500), as.integer(100)),   learning_rate = 0.001,   max_epochs = 5,   LSImethod = 1,   verbose = TRUE,   backend = c(\"auto\", \"wgpu\", \"nd\", \"candle\"),   threshold = NULL,   keras_model = NULL,   model_dir = \"/tmp/sc_local\",   return_probs = FALSE,   return_type = c(\"object\", \"list\"),   debug = FALSE,   train_only = FALSE,   addbias = FALSE,   ... )"},{"path":"https://furlan-lab.github.io/viewmastR/reference/viewmastR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integrate and Train Models on Reference Dataset and (Optionally) Infer on Query Datasets — viewmastR","text":"query_cds Seurat cell_data_set object representing query dataset. NULL, function operate \"reference-\" mode, using reference dataset training testing . ref_cds Seurat cell_data_set object representing reference dataset. required. ref_celldata_col character string specifying metadata column ref_cds contains cell labels. query_celldata_col character string specifying metadata column name query_cds (reference reference-mode) predicted labels stored. NULL, defaults \"viewmastR_pred\". FUNC character string specifying modeling function apply. One \"mlr\", \"nn\", \"nb\". norm_method Character string indicating normalization method. One \"log\", \"binary\", \"size_only\", \"none\". selected_features character vector specifying genes subset. NULL, uses set common features (query provided) selected genes directly (reference-). train_frac numeric value 0 1 specifying fraction reference cells use training. remainder used testing. tf_idf Logical, whether apply TF-IDF transformation normalization. scale Logical, whether scale data. tf_idf scale TRUE, TF-IDF takes precedence. hidden_layers numeric vector indicating size hidden layers (NN model). 1 2 layers allowed. learning_rate Numeric, learning rate model training. max_epochs Integer, maximum number epochs model training. LSImethod Integer, specifying TF-IDF method variant using TF-IDF. verbose Logical, whether print progress messages. backend character string specifying backend use. One \"wgpu\", \"nd\", \"candle\". threshold Currently unused. Can NULL. keras_model Currently unused. Can NULL. model_dir character string specifying directory store model artifacts. return_probs Logical, whether return predicted probabilities object's metadata. return_type character string specifying return type. One \"object\" \"list\". \"object\", returns updated query_cds. \"list\", returns list containing object training_output. debug Logical, whether print debugging messages dimension checks. train_only Logical, TRUE, reference data processed query data included. addbias Logical, whether add bias term (row ones) data. ... Additional arguments passed setup_training.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/viewmastR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integrate and Train Models on Reference Dataset and (Optionally) Infer on Query Datasets — viewmastR","text":"Depending return_type, returns either: return_type = \"object\": input query_cds (ref_cds query_cds = NULL) predicted labels (optionally probabilities) appended. return_type = \"list\": list containing: object updated query_cds (ref_cds). training_output output model training process, including probabilities applicable.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/viewmastR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Integrate and Train Models on Reference Dataset and (Optionally) Infer on Query Datasets — viewmastR","text":"function first calls setup_training preprocess split data training, testing, optionally query subsets. , based selected FUNC, calls one model training prediction functions (process_learning_obj_mlr, process_learning_obj_ann, process_learning_obj_nb). train_only = TRUE, query portion skipped query predictions made. \"mlr\" \"nn\" functions, predicted log odds converted probabilities using logistic function. Predicted cell labels assigned query_cds (ref_cds query provided).","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/viewmastR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integrate and Train Models on Reference Dataset and (Optionally) Infer on Query Datasets — viewmastR","text":"","code":"if (FALSE) { # \\dontrun{ # Training and predicting with reference and query data: res <- viewmastR(   query_cds = query_seurat_obj,   ref_cds = ref_seurat_obj,   ref_celldata_col = \"cell_type\",   FUNC = \"mlr\",   norm_method = \"log\",   train_frac = 0.8,   backend = \"wgpu\",   verbose = TRUE,   return_type = \"object\" )  # Reference-only scenario: res_ref <- viewmastR(   query_cds = NULL,   ref_cds = ref_cds_obj,   ref_celldata_col = \"cell_type\",   FUNC = \"nn\",   norm_method = \"none\",   train_frac = 0.7,   scale = TRUE,   train_only = TRUE,   return_type = \"list\" ) } # }"},{"path":"https://furlan-lab.github.io/viewmastR/reference/viewmastR_infer.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to infer cell labels using a trained model — viewmastR_infer","title":"Function to infer cell labels using a trained model — viewmastR_infer","text":"function infers cell labels using trained model updates input dataset inferred labels.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/viewmastR_infer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to infer cell labels using a trained model — viewmastR_infer","text":"","code":"viewmastR_infer(   query_cds,   model_dir,   selected_features,   query_celldata_col = \"viewmastR_inferred\",   labels = NULL,   verbose = TRUE,   return_probs = FALSE,   return_type = c(\"object\", \"list\"),   chunks = 1,   workers = 1,   batch_size = NULL,   show_progress = TRUE )"},{"path":"https://furlan-lab.github.io/viewmastR/reference/viewmastR_infer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to infer cell labels using a trained model — viewmastR_infer","text":"query_cds Seurat cell_data_set object - dataset cell labels inferred. model_dir character path trained model file. selected_features character vector - Features used inference (must used model creation). query_celldata_col character vector - names column store inferred cell labels query dataset. Default \"viewmastR_inferred\". labels character vector - optional labels corresponding class indices. Default NULL. verbose bool - show messaging return_probs logical TRUE, returns class probabilities. Default FALSE. return_type character string, either \"object\" \"list\". \"object\", updated query_cds returned. \"list\", list containing updated object raw inference results returned. Default \"object\". chunks integer indicating number chunks split data parallelization. Default 1 (chunking). workers integer specifying number parallel workers use. Default 1 (parallelization). batch_size integer specifying batch size used inference. NULL, heuristic used determine suitable batch size based data number chunks. show_progress logical indicating whether show progress bar total elapsed time. Default TRUE.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/viewmastR_infer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to infer cell labels using a trained model — viewmastR_infer","text":"Depending return_type: \"object\": Returns updated query_cds inferred labels query_celldata_col optionally probabilities metadata. \"list\": Returns list containing: objectThe updated query_cds. training_outputThe raw inference results including probabilities.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/viewmastR_infer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to infer cell labels using a trained model — viewmastR_infer","text":"function first checks variable features specified selected_features present query_cds, extracts normalized counts, determines whether run sequentially parallel. parallelization enabled (workers > 1), dataset split chunks, chunk processed run model inference parallel. progress bar displayed showing number completed chunks total elapsed time. underlying model loaded specified model_path, class probabilities (log-odds) computed cell. function assigns likely label cell. Optionally, probabilities added object's metadata.","code":""},{"path":[]},{"path":"https://furlan-lab.github.io/viewmastR/reference/writeMMgz.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a compressed MatrixMarket file — writeMMgz","title":"Write a compressed MatrixMarket file — writeMMgz","text":"function writes sparse matrix MatrixMarket format compressed .gz file. function handles real integer matrix types.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/writeMMgz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a compressed MatrixMarket file — writeMMgz","text":"","code":"writeMMgz(x, file)"},{"path":"https://furlan-lab.github.io/viewmastR/reference/writeMMgz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a compressed MatrixMarket file — writeMMgz","text":"x sparse matrix (typically dgCMatrix ngCMatrix object). file character string specifying output file name, compressed .gz format.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/writeMMgz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a compressed MatrixMarket file — writeMMgz","text":"function return value. writes file side effect.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/writeMMgz.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write a compressed MatrixMarket file — writeMMgz","text":"function writes matrix MatrixMarket coordinate format. first writes header indicating matrix type size, appends matrix data. matrix ngCMatrix, treated integer matrix, otherwise real matrix. function compresses output .gz file.","code":""},{"path":"https://furlan-lab.github.io/viewmastR/reference/writeMMgz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a compressed MatrixMarket file — writeMMgz","text":"","code":"if (FALSE) { # \\dontrun{ library(Matrix) m <- Matrix(c(0, 1, 0, 2), 2, 2, sparse = TRUE) writeMMgz(m, \"matrix.mtx.gz\") } # }"},{"path":"https://furlan-lab.github.io/viewmastR/news/index.html","id":"viewmastr-v030","dir":"Changelog","previous_headings":"","what":"viewmastR v0.3.0","title":"viewmastR v0.3.0","text":"bug - fixed bug failed correctly perform ReLu NN enhancement - upgrade burn 0.17.1 rust 2024 version enhancement - store feature names alongside model.mpk file meta.mpk","code":""},{"path":"https://furlan-lab.github.io/viewmastR/news/index.html","id":"viewmastr-v024","dir":"Changelog","previous_headings":"","what":"viewmastR v0.2.4","title":"viewmastR v0.2.4","text":"bug - incorrectly printed training accuracy specific situations bug - fixed error probability calculations performance improvement - enabled train_only mode inference can done large datasets separately; embedded minor performance enhancements throughout - See BigQuery Vignette","code":""},{"path":"https://furlan-lab.github.io/viewmastR/news/index.html","id":"viewmastr-v023","dir":"Changelog","previous_headings":"","what":"viewmastR v0.2.3","title":"viewmastR v0.2.3","text":"new feature - naive bayes implementation new feature - make3file function easy exporting Seurat objects performance improvement - improved sparse variance function efficiency minor bug - fixed return type ‘matrix’ training function minor bug - fixed tf_idf function enhancement - added debug function enables tracking dimensions across learning steps enhancement - made number enhancements rust code","code":""},{"path":"https://furlan-lab.github.io/viewmastR/news/index.html","id":"viewmastr-v022","dir":"Changelog","previous_headings":"","what":"viewmastR v0.2.2","title":"viewmastR v0.2.2","text":"minor changes packaged actual release","code":""},{"path":[]},{"path":"https://furlan-lab.github.io/viewmastR/news/index.html","id":"new-features-0-2-1","dir":"Changelog","previous_headings":"","what":"New features","title":"viewmastR v0.2.1","text":"use saved models minor bugs","code":""},{"path":[]},{"path":"https://furlan-lab.github.io/viewmastR/news/index.html","id":"new-features-0-1-5","dir":"Changelog","previous_headings":"","what":"New features","title":"viewmastR v0.1.5","text":"splat_bulk_reference (released viewmastRust)","code":""},{"path":[]},{"path":"https://furlan-lab.github.io/viewmastR/news/index.html","id":"new-features-0-1-4","dir":"Changelog","previous_headings":"","what":"New features","title":"viewmastR v0.1.4","text":"sfc color function (released viewmastRust)","code":""},{"path":"https://furlan-lab.github.io/viewmastR/news/index.html","id":"minor-bug-fixes-and-improvements-0-1-4","dir":"Changelog","previous_headings":"","what":"Minor bug fixes and improvements","title":"viewmastR v0.1.4","text":"many (released viewmastRust)","code":""},{"path":[]},{"path":"https://furlan-lab.github.io/viewmastR/news/index.html","id":"new-features-0-1-2","dir":"Changelog","previous_headings":"","what":"New features","title":"viewmastR v0.1.2","text":"augment function (released viewmastRust)","code":""},{"path":"https://furlan-lab.github.io/viewmastR/news/index.html","id":"minor-bug-fixes-and-improvements-0-1-2","dir":"Changelog","previous_headings":"","what":"Minor bug fixes and improvements","title":"viewmastR v0.1.2","text":"many (released viewmastRust)","code":""},{"path":"https://furlan-lab.github.io/viewmastR/news/index.html","id":"viewmastr-v010","dir":"Changelog","previous_headings":"","what":"viewmastR v0.1.0","title":"viewmastR v0.1.0","text":"first stable version (released viewmastRust)","code":""}]
